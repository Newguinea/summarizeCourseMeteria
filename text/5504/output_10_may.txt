page_content="I would like that.I do that last night.Yeah.What can I do?OK, Good afternoon, everyone.Um, hope you all had a nice week.Let's get started.I So let me try to operate on both computers.Difference that else.Uh, see what I can log into, right?It's what I want.Yeah.So you got tell.Yeah, It Yes, you.And past 10.Yeah, OK, just bear with me.I'm trying to get, um, both screen working.I know.Yeah, I see that text.12.Yeah.So she got we ready?Thank you.Mhm.You fine.How many?How do I present this You so much.OK, so I'm trying to get two screen working soI can do a bit of demo while I gothrough the lecture slides.All right, So, um, we've done quite a few things,uh, in the past couple of weeks, uh, in termsof graph databases and I've seen in the labs thismorning, um, everyone is, uh, geared up and, uh, importedusing the e c l to, um, using for, um,you know, basically converting your relational, uh, star schema, uh,into a graph database.So that's only one way of doing that.Um, so I will use today's lecture to introduce twoother ways.One.Um, actually, I think Michael did the, uh, load CSv last week.Um, so I will, um, use this lecture to introducesomething called, uh, awesome procedures.Uh, in CIA.Uh, so a PC, um, is a very useful, uh,library, uh, for importing data and do all sorts ofqueries.That is, um, solving the limitation of C A.Um so it's a community plug in, but it's verypowerful.So I'll use that to introduce how you can importDina mic relationships.Uh, rather than just a single relationship at a time,Uh, into your, uh, new four j database.So, um, having said that, we have basically, um, ata higher level, three different ways of loading your data,uh, inside a graph database.So given a relational database design that you already have,you could easily use the e t l tool, thenew J E T l tool, uh, without any programming.Basically, so you can just load things very quickly intoyour graph database.That's what I call quick, fast prototyping.So if you really want to try something out, andthen test out some queries and, um, see how thingswork.Um, maybe at the same time, trying to criticise thisrelational database design.Um, that's the way to go.That's your very first step.Um, And then once you, um you know, explore alittle bit you find maybe I should create some newnotes.Maybe I should create some relationships, new relationships.What do I do?You don't necessarily go back to your relational database again.Instead, you will create a CS v file.Or maybe the CS V could be generated or createdusing python create a CS V file using low CSV um, coupled with, um, some advanced functionalities in aO.C.Um, you will be importing extra data, uh, into your,uh, graph database.So that definitely shows, You know, the the the keydifferences, um, between, um, relational and, uh, graph database relationaldatabase.You have to design your schema and get it fixedup front.Um, once you have to, you know, make changes.You have to redesign everything and reload everything.Right?So but graph database is additive.You can progressively add new things in, uh, without, uh,interrupting the the overall structure of your graph database.Certainly.It's at the cost of, uh, integrity.Um, because sometimes things if you don't check it programming,uh, or using certain, uh, gatekeepers in your programme youmight run into, uh, inconsistencies.But that's something that you need to keep in mind.So my task today is to introduce advanced cipher, um,and then this awesome, uh, library of, uh, procedures thatyou can make use of.So I will try to use both screens.Uh, so one side is the slides, and the otherside is the demo.We'll see whether we can go through this number ofslides as we go along.Uh, but the very first part is we still stayin CIA.Uh, the plane cipher.We will try to introduce, uh, functions, uh, for aggregation,Um, and other, uh, reasonably useful, uh, cipher clauses.Uh, so you can see that the first, uh, sectionand this is, you know, recap, cipher, aggregation.And then we move on to a O.C.And then after that, uh, we'll introduce, um, even moreadvanced concepts such as pass expansion, uh, in cipher andthen also, um, how we do, uh, pass expanding orusing the A PC pass expander, uh, to, uh, searchmultiple hobs away, Uh, in your, uh, um, graph database.And then we introduce, um, virtual nodes and virtual patternsor virtual path.Um, and then ultimately, uh, virtual graph.So the nodes are a virtual node which are notphysically, um, um, exist in your, uh, in your, uh,graph database.OK, so let's get started.Um, the first, uh, database I'll use, um is called,um it's about people and cities.So if we navigate to the path of where thedatas are, uh, so remember, uh, when we introduce lowCS V.We have to, um, put our CS.V file, uh, in a default folder, um, so thatnew four G can find it.So I'll just quickly navigate to my default folder.Um, sorry I've got So that's on my hard discand then users.And then this is my new four j home.So under the new four J home, I have thedata relay data, and then, um, I have, uh, DBMS.So one of the databases that I created yesterday Ithink, um, is this one and then I go toimport, Uh, so this is about the, uh, the otherthe words relations that I want to demo.But let me go back to they have the one,um So that's the trouble of finding you know, wherethese datas are because the database is, um, identified usinga unique identifier rather than a proper name.Um, so maybe maybe it's today, this one that Iworked on, so I've got to import.Sorry, there's a bit of OK, yes, this one.It has the information about C DS.Um, so I have people live in, um, cities, Uh,so you can open it up in an excel, andthen, um, take a look at the data first.So the first column, um, is person's name, and thenthe second column is C.T.So it really is the person identifier.And then the CD identifier.So we assume that every person has this unique name.Uh, but if you have people that have, um, youknow, common names, um, then you probably need to useID in this case.So this is just a very illustrative kind of, umexample.So we make very simple assumptions.And then for each person, um, we have an occupation.So just keep the data set in mind.And then we have, uh, relationships between people.OK, so so we have three CS v files.Um, and as you can see this relationship, um, couldbe, you know, uh, separated into two separate CS Vfiles.One is only about follows, and the other one isabout nodes.OK, so these are two different relationships, but we keepingit inside one single CS v file.Um, and this can be only I mean, this canonly be imported using a, um, using cipher.Uh, load CS v.You won't be able to incorporate dynamic relationships, so youwill have to keep, um, all the relationships of nodesinto one table and all the relationships into follows intoanother table.Um, and then you import or load CS V twice.OK, imagine that you have lots of relationships, so youcould be friend with, um, family with and high school.Um, you know, mates and different kinds of relationships.Once you have multiple relationships, this becomes the low CS.V becomes quite limited.So you can't really use, um, cipher low CS V.Instead, you will use a OK, um, so just keepthat in mind.Um, and we'll introduce the syntax as we go along.How do I never get it?OK, so a quick recap, Uh, when we have, um,uh, notes of label person and another node with labelcompany, uh, we would write, uh, in brackets, so inbrackets indicate this is a node.Um, inside the bracket, we specify the label.Uh, we specify the attribute.Um, uh, or the property value pairs.And then, um, the other node is specified in similarways with inside, um, a pair of round brackets.Uh, so the round brackets, uh, inside that we havelabel.And we have, um, property value pairs, um, to uniquelyidentify a single node.So we have node and node, and then we havethe hyphen to indicate the start of a relationship.And then this, um, column, um, followed by the typeof the relationship.Um, inside a pair of square brackets, um, gives usa pattern.Gives us a path, uh, saying that Jennifer, um, worksfor, uh, a company called Neo.So it's almost like, you know, playing English.And it's fairly easy to navigate.Um, but just bear in mind of all these punctuationsand all these, um, different types of brackets.So curly brackets is for property value.Pairs run brackets is for nodes, and then square bracketis for relations.OK, so I don't know how I move to thenext slide.Oh, here we go.Um, and then we, uh, last week we looked at,uh, create, uh, merge and low CS V.Uh, so merge is very useful so that you don'tcreate duplicate um, nodes.Um And so when when you create unique ones, umor, uh, brand new ones you will use create.But if you have, um, existing nodes already you woulduse merge.And we looked at low CS V, uh, match andreturn classes and the filtering using the ware classes verymuch similar to S E O.Um.And then we can set a variable.Um, you know, on the fly.So you could basically add a new property value pairto a node using the set.Um uh, class.And certainly you can remove a note and then youcan detach delete, um, to remove things.Um, And then, uh, we also briefly looked at wise.So the wise class is very useful, which basically, um,worked as a channel that channel through what you've alreadygot, uh, previously, uh, so in terms of, uh, avariable and then passed it to the downstream.Uh, colossus.OK, so we'll see the use of these, um, manytimes.Um, today.Um OK, so the several query, uh, here, um, asyou can Perhaps, you know, just read by looking atthis, Um uh, statement or clauses.The match class says, um, I have a person witha name gim.Um, and then this g knows, Uh, some people.OK, I want to return this Some people.So basically, um, the people that James knows, Um, sothis is James as a note and then has anoutgoing link to a person.OK, so this, uh, person would be, um, that, youknow, have a incoming connection.Uh, but that incoming connection has to be g uh,has to be Jim.So Jim knows that person.So it's" metadata={}
 
 
page_content="you have multiple relationships, this becomes the low CS.V becomes quite limited.So you can't really use, um, cipher low CS V.Instead, you will use a OK, um, so just keepthat in mind.Um, and we'll introduce the syntax as we go along.How do I never get it?OK, so a quick recap, Uh, when we have, um,uh, notes of label person and another node with labelcompany, uh, we would write, uh, in brackets, so inbrackets indicate this is a node.Um, inside the bracket, we specify the label.Uh, we specify the attribute.Um, uh, or the property value pairs.And then, um, the other node is specified in similarways with inside, um, a pair of round brackets.Uh, so the round brackets, uh, inside that we havelabel.And we have, um, property value pairs, um, to uniquelyidentify a single node.So we have node and node, and then we havethe hyphen to indicate the start of a relationship.And then this, um, column, um, followed by the typeof the relationship.Um, inside a pair of square brackets, um, gives usa pattern.Gives us a path, uh, saying that Jennifer, um, worksfor, uh, a company called Neo.So it's almost like, you know, playing English.And it's fairly easy to navigate.Um, but just bear in mind of all these punctuationsand all these, um, different types of brackets.So curly brackets is for property value.Pairs run brackets is for nodes, and then square bracketis for relations.OK, so I don't know how I move to thenext slide.Oh, here we go.Um, and then we, uh, last week we looked at,uh, create, uh, merge and low CS V.Uh, so merge is very useful so that you don'tcreate duplicate um, nodes.Um And so when when you create unique ones, umor, uh, brand new ones you will use create.But if you have, um, existing nodes already you woulduse merge.And we looked at low CS V, uh, match andreturn classes and the filtering using the ware classes verymuch similar to S E O.Um.And then we can set a variable.Um, you know, on the fly.So you could basically add a new property value pairto a node using the set.Um uh, class.And certainly you can remove a note and then youcan detach delete, um, to remove things.Um, And then, uh, we also briefly looked at wise.So the wise class is very useful, which basically, um,worked as a channel that channel through what you've alreadygot, uh, previously, uh, so in terms of, uh, avariable and then passed it to the downstream.Uh, colossus.OK, so we'll see the use of these, um, manytimes.Um, today.Um OK, so the several query, uh, here, um, asyou can Perhaps, you know, just read by looking atthis, Um uh, statement or clauses.The match class says, um, I have a person witha name gim.Um, and then this g knows, Uh, some people.OK, I want to return this Some people.So basically, um, the people that James knows, Um, sothis is James as a note and then has anoutgoing link to a person.OK, so this, uh, person would be, um, that, youknow, have a incoming connection.Uh, but that incoming connection has to be g uh,has to be Jim.So Jim knows that person.So it's basically, uh, the the the person, uh, Jimknows of.OK, um, And then what we can do is wecould chain this up.So, um, Jim knows this person, and this person alsoknows some other person.Um, so we have, uh, created, um a, uh, relationof a, uh knows a also knows c.So So this is basically, um it's not necessarily transitive,but we want to extract out, uh, people who, umnot only g knows of, um, through a third personor through a middle person.B uh, but also directly.They know each other.OK, so, um, because, um Jim know Mary Mary?No, Bob.Jim may not actually know, Bob.OK, so But we are trying to extract, um, thisrelation or patterns that says, you know, um, this Genealso knows, uh, this other person's friend or other person's,um you know, uh, what do you call it?You know, someone.Uh so So in the in the knowing circle, Um,um, they know each other directly, so that's, uh, away of combining different match clauses.Um, trying to return the result.Um, so with data warehousing, what we want to domost of the time is actually aggregation.So how do we do aggregation.Uh, in, uh, graph database.So graph database, actually, um, allows you to do similarthings, Um, as relational database.So I want you to actually actively think about, um,the, uh the cube idea, the the dimension aggregation, thedrill down and the roll up that we introduced earlyin the semester.Um, and see how this can be implemented, Uh, ina graph database query.Um, so, um, that will be your your active, youknow, skill set in terms of connecting what's in therelational data warehousing, um, and this graph database.So we could, uh, for each person list the numberof friends they have.And, um, for each movie, we list the, uh, thename of all the people who watch the movie, Um,and so forth.So this allows us to do aggregation.Uh, So, for example, if we want to list thenumber of friends, uh, for each person, what do wedo?Uh, so we have this database already loaded.Um, So before you start anything, um, the one thingto look at is once you create, um, a databasein U for J.Um, you will need to, um, check, uh to seewhether your plugins, um, are installed or not.So, I before I start, I click on open andthat opens this up open this little tab on theright hand side up.Um, so this little tab click on, uh, plugins.And then you check to see whether a PC isinstalled or not.So if it's not installed, I click on install.Uh, so so long as you have Internet net connection,apo will be installed almost instantly.Um, And then the other thing that we will talkabout this graph data signs so you could install thatas well, but not today.We're not gonna, uh, we're gonna do that next week,so but these are the two plugins or two librariesthat we're gonna make use of.And as you can see from this little description, theA.O.C.Library consists of many, which is about 450 procedures andfunctions, Um, for us to use.So that's a very powerful one.Um, and then once you've double checked that you've installedthe right plug in so you can make use ofthe functions and procedures in a PC, you can startyour um, graph database.So it takes a while.Uh, my computer, uh, memory and processing power is quitelimited.So while we waiting, can people just give a guess?Um, of what will be the, um, construct or thefunction to use to count the total number of friendscount?Yes.So it's very simple.So instead of returning the node, um, of person two,we can count How many?Uh, the the, um how many, uh, person notes thatwe have returned.So it's basically inside your return clause.OK, so now I can open the browser, and, uhso I I will also take this opportunity to lookat, um, you know, the the different buttons that yousee, uh, in the new four g browser.So, um, as you can see, this new four gbrowser is, um, quite, you know, clean in the sensethat you can easily find things out, but a lotof time that we don't really make use of thesebuttons.So this button here, once you load your data in,you can see this, Um, like a a summary ofwhat you've got.So in this, uh, particular database, I have 575.Uh, sorry.517 notes.Um, and then I have all kinds of labels, uh,indicating the occupation.Um, of Yeah.Oh.Oh, OK.What's going on here?Yeah, that's the trouble of not having this for, uh,I can minimise it.Or I can swap this two to cut over.No.Better, but still, I mean, yeah.Um So how about let's swap the two screen?Because the demo is probably more important.How does that look?Is that good?OK, yeah, It's a pity I can't figure out howto get the screen down.OK, so, um, with the database, um, you get agood summary of, uh, the node labels and the totalnumber of nodes, and you also have a summary ofthe relation types.Um, you even have the keys for the properties.So the, um, the attribute names, for example.Um, So, um, and then some other information.Um, you connect it as, uh, new for J, theuser name.That's the default one and et cetera.So that's not that useful.But all up to property keys, um, and no labels.I I've seen a lot of students using match andreturn and trying to see whether the node had beenloaded in properly.Uh, but this is already a good way.Um, of you can even click on this, um, tosee all the actors and all the attendants and theneven, uh, the follows relationship.OK, so that's a very useful summary of your database.Um, and then the other, very useful one is thislittle star, which keeps a collection of all the scriptsthat you've written in the past.It's not specific to this particular database.Um, everything that if you written, uh, inside this newfour G browser, you can click on this little staron here and then save it to the left handside.Um, and one good habit is to create a folder.Uh, because otherwise everything will be mixed up, and andyou you probably don't really know what, uh what iswhat?Um, so I've created folders, uh, that named according to,um, you know, the database that I want account.So, for example, I will use I'm using the personand CD relationships.Um, uh, or data set.Um, I basically can just go into all these past,uh, that I've saved, um, and rerun things, Um, asI go along.OK, so so that's a a good habit to to,uh, keep track of what you've done.Uh, rather than throw things away, Um, you can evensave it.Um, you know, once you finish and you finish theexploration and you can save it into, um, a dotcypher file or, um, maybe just a plain text fileso you can make use of it later on.Um, so that's just a a bit of, uh, youknow, um, recap of what's going on here.Um, and then we certainly can do the the counting.Um, I will not demo this because it's fairly easy.Um, and then with the count, um, So maybe II do a bit so, um, and say match.Uh, let's pick a name, pick a simple name andt.Yeah.So match.Um, and then I can specify a variable person.Um, so this is lower case person, and then Ican say the name is, um uh is easier.Sorry.Bab is a capital B.Make sure you put the quotation marks around it becauseit's a string.And then, um, the pattern that we want to findout.So remember, um, patterns or relations are" metadata={}
 
 
page_content="database, I have 575.Uh, sorry.517 notes.Um, and then I have all kinds of labels, uh,indicating the occupation.Um, of Yeah.Oh.Oh, OK.What's going on here?Yeah, that's the trouble of not having this for, uh,I can minimise it.Or I can swap this two to cut over.No.Better, but still, I mean, yeah.Um So how about let's swap the two screen?Because the demo is probably more important.How does that look?Is that good?OK, yeah, It's a pity I can't figure out howto get the screen down.OK, so, um, with the database, um, you get agood summary of, uh, the node labels and the totalnumber of nodes, and you also have a summary ofthe relation types.Um, you even have the keys for the properties.So the, um, the attribute names, for example.Um, So, um, and then some other information.Um, you connect it as, uh, new for J, theuser name.That's the default one and et cetera.So that's not that useful.But all up to property keys, um, and no labels.I I've seen a lot of students using match andreturn and trying to see whether the node had beenloaded in properly.Uh, but this is already a good way.Um, of you can even click on this, um, tosee all the actors and all the attendants and theneven, uh, the follows relationship.OK, so that's a very useful summary of your database.Um, and then the other, very useful one is thislittle star, which keeps a collection of all the scriptsthat you've written in the past.It's not specific to this particular database.Um, everything that if you written, uh, inside this newfour G browser, you can click on this little staron here and then save it to the left handside.Um, and one good habit is to create a folder.Uh, because otherwise everything will be mixed up, and andyou you probably don't really know what, uh what iswhat?Um, so I've created folders, uh, that named according to,um, you know, the database that I want account.So, for example, I will use I'm using the personand CD relationships.Um, uh, or data set.Um, I basically can just go into all these past,uh, that I've saved, um, and rerun things, Um, asI go along.OK, so so that's a a good habit to to,uh, keep track of what you've done.Uh, rather than throw things away, Um, you can evensave it.Um, you know, once you finish and you finish theexploration and you can save it into, um, a dotcypher file or, um, maybe just a plain text fileso you can make use of it later on.Um, so that's just a a bit of, uh, youknow, um, recap of what's going on here.Um, and then we certainly can do the the counting.Um, I will not demo this because it's fairly easy.Um, and then with the count, um, So maybe II do a bit so, um, and say match.Uh, let's pick a name, pick a simple name andt.Yeah.So match.Um, and then I can specify a variable person.Um, so this is lower case person, and then Ican say the name is, um uh is easier.Sorry.Bab is a capital B.Make sure you put the quotation marks around it becauseit's a string.And then, um, the pattern that we want to findout.So remember, um, patterns or relations are inside pair ofsquare brackets.Uh, so instead of friend, we we have, um, followsor nos OK, so it follows.And then we have the second person that we're interestedin.So p two is a person.Obviously, you can specify other things.So if we just want to, uh, find out allthe dancers bad follows, um, then we could replace thiswith dancer.OK, so that's, um a pattern specified.And then we want to return this.And then if we want the name, this person's name,and then we can count how many?OK, uh, so p two and I can specify, umnumber of, uh, specify a better, more meaningful, uh, name,uh, so follows number of, um, people fab for those.OK, so you can see that it gives you acount.How many people that, um uh, babs Bab follows.So only two people be follows, but I might wantto know you know who.Um, he's following.So if you work on the slides a bit further,um, we can use the keyword or the clause.The function.Sorry.The function collect.Um, instead of just having, um, account, we can actuallyreturn a list of who that actually follows.OK, so you can see these are the two nodesget returned.Um, so maybe we don't need the node.Maybe we just want to I mean, certainly you canlook at the graph.Um, in between.Right.So this is, um, gas and, uh, Pristina, Uh, thatthey follows.So if I If I return the just the node,then I'll be able to see the graph.Right.Um, if I just want to return the name, Iget a list.OK, so I get I don't get a graph.If I don't return the node, you can see thatthe two followers name are collected at the least returnedback to you.OK?And then you have all these, um, aggregation functions.Um, that you can make to make use of thisis very similar to, uh, CEO and very similar to,um you know, uh, the the, uh, structure query languagethat you have used before.So what do we use that for?One other thing that you could do um, is lookat the sample scripts.So these sample scripts are not your scripts.These are provided by new for J.Um, so one thing that we could look at isthe data profiling.Um, as you can see, we can count all notes.So this gives you, um um a A skeleton.Um, That you can replace this match with a particular,uh, match class, Um, with filtering by names by otherproperties.Um, and then you can use the function count, andthen you can count all relationships.Um, so these are basically, you know, one node, um,connected with another.Doesn't matter what type of relationship it is.So we can return a count of all, um, relations.And then you can, um, display the constraints and index.This is less useful.Uh, we can list all the node labels.Um, this is very useful.So when you use this procedure, you call DB dotlabels and will return all the labels for you.So I have, um this many different labels, um, insidemy, uh, database.And then, um, you can also list all the relationshiptypes.Um, so that's, um uh I only have uh, followsnos and leaves in.So that's three different relation types.Um, I have.So obviously you can do it.Um, from here.Um, but, you know, this is a programmable way ofusing cipher to look at your, um uh uh, youryour overall, uh, data, uh, that you have.Um, so what is related and how, um is somethingcalled, uh, schema?OK, so remember, this is what you get.Um, after you connect to a relational database, Um, ifyou remember, uh, using the e t l tool.Um, you you actually that the schema, uh, graph generated.Um, sometimes it is also called as met graph.Um, so in a it's called Met graph in, um,cipher.Uh, it's called schema graph.So we can visualise the schema, uh, at a higherlevel so you can see, uh, that we have inhere.We have actors and related to engineer and lecture relatedto um, yeah, so it's It's a messy graph, butit's basically indicating people's, uh, relationship.Um, OK, so that's a very useful one.Um, after you finish creating your graph database, I wouldstrongly suggest you to do a DB dot visualisation andthen capture your screenshot and see, you know how youractual implementation, uh, differs from your initial design.OK, so your initial design is arrow, uh, using thearrow app.Um, but your actual implementation might be differing a littlebit.That's fine.Yeah, And then the other more, uh, useful thing iscalled, uh, this data profiling, uh, what kind of nodesAnd then, um, the size of keys.Um, so how many keys?Um, average number of keys and then so it's keysis basically a function returning the number of properties, uh,for each node, and then you can apply the averageand Min and Max, um, on it.Um, so if you look at the lecture slides, uh,we have, um so I'll go back to that.Um, but I'm doing data profiling already.Um, so as you can see, we have cipher, um,clauses that does similar things.For example, when you try to get all the labels,you could match and return distinct labels and OK, soit's like match and return n.But instead of return n, you return the distinct labelsof N.That's the same as calling DB dot labels.And similarly, um, you can match a relation or pattern,uh, a relationship using, um, and any relationship related to,um A So you could even replace the n withbrackets.Um, and then we return distinct type.OK, so we so we we use type for relationship,But we use labels, uh, for nodes.So the distinct types of relationship you can use thismatch class as well.Um, an easier way is to use the DB dotrelationship types.OK, so, um and you can find all notes thatare, uh, disjoint, uh, basically saying nots that do nothave any relationship with other nodes.So here, instead of, um, just and related to something,I I have a negation here, so I return allthe notes that doesn't have any relations.Uh, with So basically they are, or they are.They are isolated, um, notes.And then, um, this one is returning.Um, the nodes that have a attribute called name.So basically, it's not returning.Um, the, uh, particular name.It's basically saying, you know, um, any nos that withthe name attributes, uh, will be returned.Ok, um and this is you know, any relationship with,um, a type origin will be returned.Um, and then you can do met graph or schemagraph.Which is, uh, what I just showed you, uh, aminute ago.Um, so the the default code in here is, um,some part, especially this part is obsolete.So if you run this, if I run this here,um, it will give you an error.So it will say a pattern expression should only beused in order to test the existence of a pattern.Um, and then it keeps going on, uh, saying, youknow, uh, no other use is allowed, and you haveto use something called a pattern comprehension.Um, so I will introduce, uh, pattern comprehension, uh, ina minute.But before that, um, do you guys remember what, um,list comprehension in Python is OK, so this is thecipher way of doing something pic, um so cipher havethis pattern comprehension and also least comprehension.We'll introduce that in a minute, but here, in orderto fix this error, what we need to do iswe need to have this, um, pattern comprehension.Uh, so I have a pattern where a node isrelated to another node.And then basically, I collected the" metadata={}
 
 
page_content="design is arrow, uh, using thearrow app.Um, but your actual implementation might be differing a littlebit.That's fine.Yeah, And then the other more, uh, useful thing iscalled, uh, this data profiling, uh, what kind of nodesAnd then, um, the size of keys.Um, so how many keys?Um, average number of keys and then so it's keysis basically a function returning the number of properties, uh,for each node, and then you can apply the averageand Min and Max, um, on it.Um, so if you look at the lecture slides, uh,we have, um so I'll go back to that.Um, but I'm doing data profiling already.Um, so as you can see, we have cipher, um,clauses that does similar things.For example, when you try to get all the labels,you could match and return distinct labels and OK, soit's like match and return n.But instead of return n, you return the distinct labelsof N.That's the same as calling DB dot labels.And similarly, um, you can match a relation or pattern,uh, a relationship using, um, and any relationship related to,um A So you could even replace the n withbrackets.Um, and then we return distinct type.OK, so we so we we use type for relationship,But we use labels, uh, for nodes.So the distinct types of relationship you can use thismatch class as well.Um, an easier way is to use the DB dotrelationship types.OK, so, um and you can find all notes thatare, uh, disjoint, uh, basically saying nots that do nothave any relationship with other nodes.So here, instead of, um, just and related to something,I I have a negation here, so I return allthe notes that doesn't have any relations.Uh, with So basically they are, or they are.They are isolated, um, notes.And then, um, this one is returning.Um, the nodes that have a attribute called name.So basically, it's not returning.Um, the, uh, particular name.It's basically saying, you know, um, any nos that withthe name attributes, uh, will be returned.Ok, um and this is you know, any relationship with,um, a type origin will be returned.Um, and then you can do met graph or schemagraph.Which is, uh, what I just showed you, uh, aminute ago.Um, so the the default code in here is, um,some part, especially this part is obsolete.So if you run this, if I run this here,um, it will give you an error.So it will say a pattern expression should only beused in order to test the existence of a pattern.Um, and then it keeps going on, uh, saying, youknow, uh, no other use is allowed, and you haveto use something called a pattern comprehension.Um, so I will introduce, uh, pattern comprehension, uh, ina minute.But before that, um, do you guys remember what, um,list comprehension in Python is OK, so this is thecipher way of doing something pic, um so cipher havethis pattern comprehension and also least comprehension.We'll introduce that in a minute, but here, in orderto fix this error, what we need to do iswe need to have this, um, pattern comprehension.Uh, so I have a pattern where a node isrelated to another node.And then basically, I collected the relationships inside a list.So all the relationships, um, I've collected So, um, whenthe node is linked to another node, all the relationshipsI've collected here, um, is treated, um, as a list.So I construct a list as I go through everyrelations, um, or every relationships in my graph and notethat I have used this pipe.OK, so this, uh, bar this pipe notation to indicate,um, I'm collecting every single r, um, inside, um, intoa list.OK, so this is and this list is called allrelations.OK, so this is a 4.3 new four j thing.Um, so before 4.3, uh, this other syntax is allowed,but it's now much more, um, syntactically, uh, rigid orsynthetically, uh, making more sense.Because, really, you know, the previous previous slides here, itdoesn't really indicate that I I have collected a listof relations.Um, and then, uh, the function size on something thatis not the least doesn't make sense.OK, so that's why they have improved it, uh, byintroducing this pattern comprehension.So we have collected um, a list of relationships.Um, and then we name it with this.All rails, uh, variable.So instead of using the class, I can basically weliterally replace this All rails with this pattern comprehension.OK, with this square brackets, I get the same results.Um, but anyone could think of you know why I'mkeeping it as a variable, so exactly, So you canuse it.You can collect it once and use it multiple places.Um, when you have large graph, if you do thisagain and again, um, multiple times, even though you getthe same results, your computation cost is unnecessarily huge.Ok, um, so that's why it's better to use theWi class.As I said before, this class is like a funnel.Uh, that connects, uh, what's before and after?Uh, so it it connects the end.It passes the variable end the value end, um, andpasses this all, uh, rails or all relationships variable tothe downstream, uh, or downstream queries.OK, so, um, recap again.So recall what we have learned in python.Uh, where instead of writing this ugly follow up, wecan really use this list comprehension.Uh, to say, You know, for this X in thisfollow.Um, So, um, this, um a, um is in X,so this condition is met.I will return the X.Um, and then this, uh, multiple X values will automaticallycreate a list for me.Um, without this list comprehension, we have to write afollow up and then with, uh, within the follow up,you write if statement, and then you create an emptynew list so that you can append the new valuesin OK, so a lot of people actually find this,uh, more intuitive.Um, but as you become more proficient, you will findthis is just so easy to use.OK?And similarly, we have this list comprehension in cipher.Um, I'm gonna use this example, uh, of, uh, aperson, um, acting multiple movies.Um, so as you can see, uh, instead of writingthe title of the movie in, I'm actually using labelsto label this, uh, graph.Um, that's just a, uh, alternative way of doing things.Um, as you can see from, uh, this new fourg, uh, desktop.Uh, so maybe I can look at a graph thatwe returned So in this little graph here, um, I'mactually using the person's name, um, as, um, a captionor as a label that's displayed on the note.Uh, but in certain, um, other, uh, cases, people mightwant to display this as the, um the the labelor or the type.Um, uh, the label of that node.So, uh, instead of doing, uh, the name, I coulddisplay the attendant.So how do we do that?So you can click on this, and then you cansee the the name attribute is highlighted.Um, I can use occupation to display, um, as adisplay for the note.So it's it's a personal choice.Um, but I'm just illustrating, you know, you can chooseother attributes, um, as the caption for your notes.And similarly, you can choose other attributes, Um, as thecaption for your, uh, relationships.So, um, as this little graph shows us, we have,uh, canoe ribs, uh, acted in multiple movies.Uh, so let's see, um, I might need to Unfortunately,I think I need to stop this new four ggraph and then start another one.So I've prepared, um, a different database.So that I won't really mix everything up, so I'llquickly illus illustrate this, and then we'll, um, have abreak.OK, so that's the, um, create statement.You basically, you know, create a person called, uh uhk and then kno Reeves is the actor.And then, um, he acted in a list of movies.So you create the personal, you create multiple movie notes,and then you create, um, relationships between the actor andthe movie.So all this, um, And as I said before that,this is, uh, uh, a lecture constructed by looking at,um, different web-based resources.So these are active links, so you can click onthose links, and then, um, have a look at theoriginal blog or the original documentation.So with this, uh, pattern, um, at least comprehension.So let's let's start from a fresh um so ifI look at my database, I can see this databasehas already, uh, been created with eight, uh, movies and,um, eight.Uh, sorry.Eight NOs, uh, which include movies and persons and thenrelationships, um, as acted in.So if if we don't have anything, I can easily,you know, just, um do a detach all or deleteall.So as you can see, um, that I save thisdelete all as a favourite scripts.Because sometimes I I really have to, you know, deleteeverything.Um, So So you could match and and detach delete.And And that's in your favourite.And you could also do a show like match andreturn and with the limits.Um um, because if if you don't specify the limitthat you return everything, then your, uh, graph will besuper slow.So these are my favourite things that I keep asa general, um, general favourite scripts to run.So I don't really need to create anymore because I'vealready created this.Um, and then we can create, uh, we can lookat the pattern, uh, comprehension.So pattern indicates I want to specify path.I want to find a pattern.So I firstly, uh, specify a note that I'm interestedin I and then I give it a name, sothis could be just end, but in order to makeit meaningful, I I named it as K.Uh, So, um, is a person with the name attributethat is, you know, um, so I want to returnthe movies.Uh, that, uh, is connected to OK, and then, uh,the title of the movie needs to contain the wordmatrix.And then I use the pipe so that I cancollect these notes into a list.But instead of collecting the notes I actually created, um,the released, uh, date, um, as a, um as a,um pattern comprehension outcome.OK, so the release is basically years.So I I basically have a collection or a listof years that these movies, um, that ku worked on,uh, the matrix movies that kno worked on, Uh umas, uh, yes.OK, so it's a It's a list of years sospanning across from 2003.So two movies in 2003, 1 in 99 9 andthen, uh, 2021 is, uh, the latest.So this is, um, you know, you can see thatthis is using this pipe, uh, together with the squaredbrackets, uh, to do a pattern, uh, comprehension.Um, and then this, um, pattern comprehension could also allowus store information as a variable.OK, so here I collect the movie titles" metadata={}
 
 
page_content="um, a different database.So that I won't really mix everything up, so I'llquickly illus illustrate this, and then we'll, um, have abreak.OK, so that's the, um, create statement.You basically, you know, create a person called, uh uhk and then kno Reeves is the actor.And then, um, he acted in a list of movies.So you create the personal, you create multiple movie notes,and then you create, um, relationships between the actor andthe movie.So all this, um, And as I said before that,this is, uh, uh, a lecture constructed by looking at,um, different web-based resources.So these are active links, so you can click onthose links, and then, um, have a look at theoriginal blog or the original documentation.So with this, uh, pattern, um, at least comprehension.So let's let's start from a fresh um so ifI look at my database, I can see this databasehas already, uh, been created with eight, uh, movies and,um, eight.Uh, sorry.Eight NOs, uh, which include movies and persons and thenrelationships, um, as acted in.So if if we don't have anything, I can easily,you know, just, um do a detach all or deleteall.So as you can see, um, that I save thisdelete all as a favourite scripts.Because sometimes I I really have to, you know, deleteeverything.Um, So So you could match and and detach delete.And And that's in your favourite.And you could also do a show like match andreturn and with the limits.Um um, because if if you don't specify the limitthat you return everything, then your, uh, graph will besuper slow.So these are my favourite things that I keep asa general, um, general favourite scripts to run.So I don't really need to create anymore because I'vealready created this.Um, and then we can create, uh, we can lookat the pattern, uh, comprehension.So pattern indicates I want to specify path.I want to find a pattern.So I firstly, uh, specify a note that I'm interestedin I and then I give it a name, sothis could be just end, but in order to makeit meaningful, I I named it as K.Uh, So, um, is a person with the name attributethat is, you know, um, so I want to returnthe movies.Uh, that, uh, is connected to OK, and then, uh,the title of the movie needs to contain the wordmatrix.And then I use the pipe so that I cancollect these notes into a list.But instead of collecting the notes I actually created, um,the released, uh, date, um, as a, um as a,um pattern comprehension outcome.OK, so the release is basically years.So I I basically have a collection or a listof years that these movies, um, that ku worked on,uh, the matrix movies that kno worked on, Uh umas, uh, yes.OK, so it's a It's a list of years sospanning across from 2003.So two movies in 2003, 1 in 99 9 andthen, uh, 2021 is, uh, the latest.So this is, um, you know, you can see thatthis is using this pipe, uh, together with the squaredbrackets, uh, to do a pattern, uh, comprehension.Um, and then this, um, pattern comprehension could also allowus store information as a variable.OK, so here I collect the movie titles instead.Instead, of the the release, date or release year.So I collect all the movie titles, and, um, thistime I didn't say that it needs to be, uhthe title doesn't need to be, uh, containing the wordmatrix.OK, so any movie that he worked in, um iscollected as movies, and then I use the set class,um, to dynamically, um, introduce a new attribute called ReResume.And this new attribute resume contains all the movie titles.So it's a list of movie titles.Um uh, worked on.OK, so if now, if I run this, you willsee, um, that the, uh if I just match thisto see, um Oh, sorry too quick and then returnSo you can see in this note.Now, I have a resume.Um, attribute Dynamically created, uh, with a list of, uh,movies that he he worked on.Um, so once we created that list, it's actually sittingin your database already, and then we can make useof that to do list comprehension.So a least comprehension, um, is a syntactical construct incipher for creating a list based on an existing list.OK, so this, uh, list comprehension code, as you cansee, because I have an existing list called, uh, Ibasically says, you know, for any movie, uh, in thislist, um, if x contains, um, the key word.The Matrix, The matrix, Uh, we can now return the,uh, matrix list.So at least the movie, uh, that with the, uh,matrix, uh, inside its title.OK, so as you can see that this, uh, matrixrelated, uh, movies are now returned.Um, as a list, this is, uh, list comprehension.So, um, it's easy to understand syntax, but you justneed to remember, uh, that, you know, this is insidea square bracket.Um, and, um, if you have, you know, for example,x dot title or something, uh, to, uh, to use,and then you need to use a pipe.But here is the least comprehension.So, um, it's already created, uh, from previous list.So it's definitely, um a simple, um, type or somethingcalled homogenous.Um, value, uh, that you can create.So you can't really add two different types of valueso you can't mix strings and integers together, um, andthen return it at least.But you can if it's all integers if it's all,uh, strings.All right, so, uh, let's have five minutes break.Um, and then we'll continue on with, um, a PCI mentioned at the beginning of the lecture.If you have multi dynamic, um, relationship you can't usee t l tool.Right?I'm suspecting because I'm getting error.This is it, Like, map the metadata to, um, fromthe data warehouse to mining.So this is the mapping, right?I Because if I do next and in data willget a bunch of errors.I suspect that it's because my fact table has multiplereferences that correct.So e t l two can't deal with that.Mm.I was talking more on the load.CS B oh, e l two should be able todeal with it, right?If I just load like back table, I might, um,Dimension tables.You already got these relationships based on primary key andforeign key.Um, so it's not a different type of relationship, soit's only 1000 right now, So yeah, you will tryto create all the labels and then get a bunchof errors, which doesn't make sense.Even though Yeah, yeah, yeah, yeah, Yeah.Like all of these are coming from the J theJ D BC driver, which, like, it's just Java occur.And it got, like, no reference point or something.I Yeah.So this query is probably somewhere in the J dBC where we're trying to use the Hm?Yeah.So n dot b ID is Can you look atyour, um, new for browser?Yes.Uh, that would be here.Yeah.So I currently just loaded all the nodes.There's no relationship.So all the notes that picked on, um, the propertykeys No, relationships have been.Yeah, because it has it failed when you try tothe relationship.So it was able to all the node.That's why it says successful.So it's on.It's on.Um, yeah, this one.OK, you got database?Yeah.All of this is every every foreign key from thecentre fact table to 1234567.Yeah, seven dimension table All failed.So the foreign key failed.It was able to import.Yeah.Yeah.Have you checked this?So you skipped a few because I have two factor.One has every dollar 111 has every dollar.One has 1000 so I'm taking the one that onlyhas 1000.So fat crime has, like, $2 million in it.So I'm taking all the ones that be the Mm.Well, OK, so this one is connected to the shareserver right now.Yeah.Yeah, yeah, yeah.So database is Project one schema.Is this one?Oh, you say you have multiple tables?Multiple.Multiple.Wouldn't that be the one that create trouble?So if you have, if you have two crack tables,uh, they have different names, and then it wouldn't beable to figure out which one to use.Well, the thing is, I got the same arrow, andI was trying to pull the original one, which ishuge exact same arrow.It doesn't matter how many more.So and now I went to the lab.OK, just make a smaller one.Yeah, I don't think you need to make the smallerone.Um, yeah.Yeah, but you can.You can specify how much to I in.Um, that's using, but that's it.No, I think Here, uh, you see that?Now you have a So I just skip all theone that's Yeah.So 21.OK, so just if you just save it and thennext here.So I But this is number of per on onenumber of per transaction.Essentially, it's still gonna go through all of them.So if I do an import data, it's gonna takeforever.I try.Oh, is it?Yeah, but the arrow will still come out The exactsame arrow.It took like, an hour and bla bla all theerrors came out just to Do you want one ofthe like one of the No, I'm just training.Yeah.So this is Yeah, this is for Oh, OK.Yeah.So the same is creating, creating, creating.But then after that, it's gonna, you know, take avery long time before the errors come up.Since you need to add all the all the notesfirst and then it will add relationship.So after you finish adding all the notes when youstart adding relationship, you will have those errors.Hm.That's weird.Yeah.Yeah.Why?I didn't have that problem.Maybe so.Your lab is fine, right?So you tried it on the new Yeah.The lab was fine.Yeah, it's not.It's a fact.And dimension tables, so but this is connecting.Not not to your, um this is connecting to yourS e o database, right?Not the the the AM SAS not.It's exactly so.The lab was this one, right?Oh, no, it was this one.Yeah.Yeah.So the lab was Yeah, I follow this exactly.And it worked.The only thing I changed was here, Like in whenyou type in your database rather than this, I justtype in Project One.Yeah, it's It's the name of the database on myI can see on my S MS.Yeah.Oh, yeah.It was effective.Yeah.OK, so this worked.I don't know why mine doesn't work.Are you able to see this?Uh, yes.OK, that's interesting.So I think it's probably not not gonna work.You can have that.That's what I did.I made a new table.Yeah.Still going?Because it's not This is not what it's per person.Yeah, yeah, yeah.You know what might be happening?Are you taking Are you taking a stratified sample ofthe exactly So what may be happening is the dimensiontable will have, um, some values that the fact tabledoesn't have because you took the top.Even with two million, I still have the also likethe dimension.Think about the three Dimension" metadata={}
 
 
page_content="1000 so I'm taking the one that onlyhas 1000.So fat crime has, like, $2 million in it.So I'm taking all the ones that be the Mm.Well, OK, so this one is connected to the shareserver right now.Yeah.Yeah, yeah, yeah.So database is Project one schema.Is this one?Oh, you say you have multiple tables?Multiple.Multiple.Wouldn't that be the one that create trouble?So if you have, if you have two crack tables,uh, they have different names, and then it wouldn't beable to figure out which one to use.Well, the thing is, I got the same arrow, andI was trying to pull the original one, which ishuge exact same arrow.It doesn't matter how many more.So and now I went to the lab.OK, just make a smaller one.Yeah, I don't think you need to make the smallerone.Um, yeah.Yeah, but you can.You can specify how much to I in.Um, that's using, but that's it.No, I think Here, uh, you see that?Now you have a So I just skip all theone that's Yeah.So 21.OK, so just if you just save it and thennext here.So I But this is number of per on onenumber of per transaction.Essentially, it's still gonna go through all of them.So if I do an import data, it's gonna takeforever.I try.Oh, is it?Yeah, but the arrow will still come out The exactsame arrow.It took like, an hour and bla bla all theerrors came out just to Do you want one ofthe like one of the No, I'm just training.Yeah.So this is Yeah, this is for Oh, OK.Yeah.So the same is creating, creating, creating.But then after that, it's gonna, you know, take avery long time before the errors come up.Since you need to add all the all the notesfirst and then it will add relationship.So after you finish adding all the notes when youstart adding relationship, you will have those errors.Hm.That's weird.Yeah.Yeah.Why?I didn't have that problem.Maybe so.Your lab is fine, right?So you tried it on the new Yeah.The lab was fine.Yeah, it's not.It's a fact.And dimension tables, so but this is connecting.Not not to your, um this is connecting to yourS e o database, right?Not the the the AM SAS not.It's exactly so.The lab was this one, right?Oh, no, it was this one.Yeah.Yeah.So the lab was Yeah, I follow this exactly.And it worked.The only thing I changed was here, Like in whenyou type in your database rather than this, I justtype in Project One.Yeah, it's It's the name of the database on myI can see on my S MS.Yeah.Oh, yeah.It was effective.Yeah.OK, so this worked.I don't know why mine doesn't work.Are you able to see this?Uh, yes.OK, that's interesting.So I think it's probably not not gonna work.You can have that.That's what I did.I made a new table.Yeah.Still going?Because it's not This is not what it's per person.Yeah, yeah, yeah.You know what might be happening?Are you taking Are you taking a stratified sample ofthe exactly So what may be happening is the dimensiontable will have, um, some values that the fact tabledoesn't have because you took the top.Even with two million, I still have the also likethe dimension.Think about the three Dimension table.It is generated every single type.But even with $2 million not every day is happening.Not crime doesn't happen every day, so you will havethat have no connection.That's normal.But for example, if your dimension table for the twomillion roles has 15 different crime types, for example.But if you're taking the top 1000 that will haveonly say five crime types.But your Dimension table has 15.So that I I think what he says is, umif what?What do you mean by reducing the number of instances?So if you only reduce the fact table, then that'sfine.So all your dimension table remains the same.Then you won't violate the the foreign key and primarykey key.I didn't I didn't touch the fact I create anew fact table with the 1st 1000 then run thesame.That creates the need.So if you keep all your dimension tables and thenjust take the top or stratified?Um, you know, 1000 from your fact table, things willwork, I think.I think if we go for stratified, what are thefactors we take in?Stratified is for every crime type you take, for example.But then again, do you do that for every time?Or do you do that for every day for PU?Or do you do that for it's a very complicated.OK, so what's wrong with having a dimension that hasno reference to it?It would just be a node hanging around in thedatabase.It shouldn't be a problem, right?It would just be a node of the day type,for example that has no connection to it.It shouldn't be a problem.No, I I think what we worry about is thatyou actually touch the dimension tables.So some of the keys in your table can haveno reference.Your dimension table is the same.How about you send me the data and then I'llhave a look and then see whether I can loadit?Um, no, I don't have access to everyone.Um, yeah, yeah.You or you.You get, um, a CV I I don't know.Yeah.Yeah.So we need to.Really?How did you create the database?Do you have a script that create the database?Like, Yes.If you give me your user name and password, thenI Yeah, sure.Yeah.OK.All right.Sorry about that.We can talk about that later.So tell me about holidays.Thank you.500.Right, You please.And the and the OK, you can.OK, so let's get started.Um, OK, Before we go into a we still have,like, two different classes that we didn't touch on.It's gonna be very brief because we have seen thatbefore.Um, the first one is wi right.So we've used the wi, um this is the funnel.Like I said before, um, and you can inside wiuse the ware.Uh, not inside Wis.But after the wi, you can use, uh, a wareclass afterwards.So you you your filtering can happen.Um, after the class, So anyone can guess what thisone is doing was what this statement is doing.I assume that that means any relationship.Mhm.So we find a note, um, with name David orperson with name Davids and then go through any otherperson and then relate to, um, any note.OK, so it doesn't have to be, uh, a personalnote, because we didn't say anything.And then, um, we funnel through, we put through theother person, Um, so that later on, we can makeuse of that variable, and then we count all thereturned nodes as a friend of a friend, OK?And then when friend of friend is greater than onewe return, um, you know who the middle person is?So that's fairly straightforward.I think I might even have.Do I have that?I probably don't have.Um, yeah, I I do have this.So this is basically using the data set we have,um, instead of David, I have it.And then, um, exactly the same, uh, statements.And now we'll be able to return all the names,um, that are as the middle person, um, that ITERis connected with, um, another person.Ok, so through a person and connect it with yetanother person.So this will be something.Um, that's quite useful.Um, if you want to have, you know, uh, alonger path basically.So we will talk about path expansion, Uh, a littlebit later.So you can, uh, use, um, a path expansion toreplace this statement if you want to.And another useful class is called, um, unwind.So it's, um, basically, uh, take a list and turnit into rows.Um, so I have a list of values, and then,um, I can return, uh, this as roles, so that'svery simple.So if we do unwind, um, And by the way,this, um, keywords in cipher, they are not case sensitive.It's just a matter of habits and convention.So you write them, um, as capitals, So lower caseN one is fine.And then I can return X and then a strainy so you can see that each element in thelist is now occupied its own single row.And then the y column just basically filled up withthe same string.Um, so here is, uh, slightly a little bit moreinvolved.So we we have returned this, um, unwind this listas rows.Um, but then we collect the distinct one.Um, so basically, you tend a list, uh, into aset.So a list allows for, uh, repetitive, uh, duplicate values.Then a set.You collect all the unique values, so that's just asimple artificial use of this.Um, OK, so let's move on.Uh, so the next one is, uh, a, uh, asI have alluded, Um, at the beginning of the lectureis awesome.Um, it's awesome procedures, uh, for C C A.Because they're truly powerful.Um, So the thing that we will look at today,um, is basically including importing and exporting data.So that's another, uh, the third way of importing exportingdata.Um, in addition to the the simplest e t ltool where you don't have control, but you don't needany programming language.Um, and then the, uh, cipher load CS v.And now we have the importing exporting, uh, in a,um, that you can create dynamic, um uh, relationships.So, um, and then the next one is, uh, textpassing.Um, And when we also look at, um, paths expansion,um, and then find the virt graph.So there are a few, uh, these are the sortof the the key things that we'll be looking at,and you need to try to keep in mind andsee how this, uh, can be applicable to your project.So a, uh, contain, uh, both procedures and functions andprocedures.They generally return um, a list of nodes, uh, thatare, um, unwanted.Um, and then, um, functions, Uh, typically are simpler.And they return a single value.Uh, like, uh, uh, a map or least, um, strainor number.So procedures tend to return, uh, more complicated, uh, datastructure, Uh, so nodes, if you present it in Jason,you can see that it's, um, quite a complicated thingto have.And similarly, um, edges.So procedure returns, uh, list of nodes or, um, edgesor patterns.Um, and then a, um basically replace the needs ofwriting your own functions each.So if you want to have customised uh uh, importing,for example, Then you You, um you tend to writeyour own functions either inside cipher or outside cipher, uh,in your python, in your python scripts or in youre t l scripts.Um, but now, with a PC, a lot of thingscan be done.Uh, using this apo procedures and functions and you canuse a You remember that use the keyword call toinvoke um, uh, a procedure or function.And then, um, when you call something, um, typically, youwill follow by a yield.Um, clause afterwards.Um, so we can load, um, a URL and turnit into a json format.Um, and you can do other you" metadata={}
 
 
page_content="I have a list of values, and then,um, I can return, uh, this as roles, so that'svery simple.So if we do unwind, um, And by the way,this, um, keywords in cipher, they are not case sensitive.It's just a matter of habits and convention.So you write them, um, as capitals, So lower caseN one is fine.And then I can return X and then a strainy so you can see that each element in thelist is now occupied its own single row.And then the y column just basically filled up withthe same string.Um, so here is, uh, slightly a little bit moreinvolved.So we we have returned this, um, unwind this listas rows.Um, but then we collect the distinct one.Um, so basically, you tend a list, uh, into aset.So a list allows for, uh, repetitive, uh, duplicate values.Then a set.You collect all the unique values, so that's just asimple artificial use of this.Um, OK, so let's move on.Uh, so the next one is, uh, a, uh, asI have alluded, Um, at the beginning of the lectureis awesome.Um, it's awesome procedures, uh, for C C A.Because they're truly powerful.Um, So the thing that we will look at today,um, is basically including importing and exporting data.So that's another, uh, the third way of importing exportingdata.Um, in addition to the the simplest e t ltool where you don't have control, but you don't needany programming language.Um, and then the, uh, cipher load CS v.And now we have the importing exporting, uh, in a,um, that you can create dynamic, um uh, relationships.So, um, and then the next one is, uh, textpassing.Um, And when we also look at, um, paths expansion,um, and then find the virt graph.So there are a few, uh, these are the sortof the the key things that we'll be looking at,and you need to try to keep in mind andsee how this, uh, can be applicable to your project.So a, uh, contain, uh, both procedures and functions andprocedures.They generally return um, a list of nodes, uh, thatare, um, unwanted.Um, and then, um, functions, Uh, typically are simpler.And they return a single value.Uh, like, uh, uh, a map or least, um, strainor number.So procedures tend to return, uh, more complicated, uh, datastructure, Uh, so nodes, if you present it in Jason,you can see that it's, um, quite a complicated thingto have.And similarly, um, edges.So procedure returns, uh, list of nodes or, um, edgesor patterns.Um, and then a, um basically replace the needs ofwriting your own functions each.So if you want to have customised uh uh, importing,for example, Then you You, um you tend to writeyour own functions either inside cipher or outside cipher, uh,in your python, in your python scripts or in youre t l scripts.Um, but now, with a PC, a lot of thingscan be done.Uh, using this apo procedures and functions and you canuse a You remember that use the keyword call toinvoke um, uh, a procedure or function.And then, um, when you call something, um, typically, youwill follow by a yield.Um, clause afterwards.Um, so we can load, um, a URL and turnit into a json format.Um, and you can do other you can read inother things.Like excel, um, and even web pages.So a is truly quite powerful.Um, uh, if you want to look at all themodules, um, you call a help, uh, to display allthe modules for you.Um, but the simplest and the most useful one islow CS v, um, and, um, can load multiple things.Like I said before, we will focus on low CSV.Um, so you could use, uh, load dot CS vor import dot CS v This little example here.Uh, when you do load dot CS v uh, yougive a common separate text file, uh, a CS vfile.And then you can see you call the a pdot load dot CS v with the file name inthere.Um, so now you don't really need to put thedata inside your import folder anymore.So you can be sitting anywhere in your, uh, localhard drive.So just refer to that location, and then, um uh,then you can yield or, uh, generate.Um, the line number.Um, And then, uh, map, Uh, which is adjacent format,Um, or a list.So if you read it in as a list, it'sbasically common separated values or as strings.Um, and then the map is, uh, more comprehensive.You have key value pairs.Um, so that's the, um, uh in load CS.V.Um, And then this part CS v.Um, allows you to have, um, you know, more specificcontrols.So you specify, uh, the nodes, the relationship.And, um, you specify a set of, uh, configurations.Um, so here, um, you could, you know, inside thelow CS v.You have adjacent object.Um, that stores key value pairs.So the file name you specify the file name, andthen you specify the labels.Um, and then you can specify all the attributes asyou like.Uh, so here, uh, when we import the CS.V.Um, from the data set, um, so you can seeI'm using, um on this screen.So I have, uh OK, so this is slightly different.Um OK, so it just, uh this is basically justload the CS v file.You can do this with multiple files, uh, in oneimport CS V instead of using cipher load CS V.Um, which one, um, cipher statement, Um, at a timefor for each, uh, file.Now we can put everything together.Um, and you can you can see in this littleexample here I have rather than comma delimited.I have this pipe Demi delimited file.Um, and then, um, I have, uh, this, um arraydeli, which is, um, this comma.OK, so e n and French are the, uh, languagethat people speaks or the person speaks.Um, it can be read as a least, um, Andthen And you can say, you know, whether the IDshould be a strain or not to specify that asa false So it's a lot more powerful, as youcan see from here.Um, as compared to the, um uh the, uh, cipher,uh, load CS v.So, um, as I mentioned before, um, if you havedifferent types of relationships between two nodes or between twoentities.Two types of entities.Uh, for example, no friends with and enemies of andbrothers off you will have to create, uh, individual CSv file.Uh, so something, uh, one person knows another person, andone person is friend with another person.So each CS v file basically represent one type ofrelationship.Um, if we have a file that wants to representmultiple relationships like the one that we have seen beforewhere we have, um, person one follows person two andperson one knows person two.Um, So there are two different types of relationships wewon't be able to load CS v using s Ahere we can.Uh, but instead, what we can do is we canload, um, that using a PC.So let's see how we did it in park.OK, so here, um, I have a statement.I have the person, um and then the the nameis, uh, from my CS v file.So, as you can see that this is a combinationof the load CS v uh, with a PC.Firstly, I load the CS v, um, with headers asas, um, as so this.This file is loaded.I say this relationship this CV file that you haveseen just now.So this is loaded, um, using a load CS V.Right.Uh, so once we load each row in, we callthe epoch create relationship function.OK, so the create relationships function takes in, um, anode and then, um, takes in the relationship type.OK, so this is a variable now, So this isbasically row dot relationship, which is the middle column fromyour, uh, relationship dot CS v.Um, so you can have as many relationship as youlike in that CS v file.You don't have to separate that into multiple CS vfile in order to create this dynamic relationships.Um, and this empty thing is basically the properties thatyou want to have, uh, for your relationship.Uh, because we don't have any.Um, uh, we don't have any, Um, sorry.We don't have any properties, uh, for for the relationshiptype, we leave it as.And then this, um, is the second person.So you basically have four arguments.Um, the first and the last arguments are the startingand end node.And then the middle two, um, is the role therelationship type and then the properties of the relationship.So once you call that, um, you yield a relationshipand then you return the relationship.So if I run this, I will create the relationships,um, already, uh, in the file.I mean, it doesn't hurt for me to run itagain.Um, because, you know, that's just already, um, relationship created.Mhm.Um, so this one created all the relationships, and, um,so that's dynamic relationships.Um, OK, so that's that.And then, um, the other thing that I want touh, specify is you know, when you or mention iswhen you load people, um, it has the same problem,right?So in instead of, um, you know, just loading aperson, Um uh, in as a person as a singlelabel.Now, with a park, you can create node with multiplelabels.Um, so when when I have the, uh, person file.OK, so the people file, I have the name ofthe person and then the occupation.Um, So instead of just having person as a label,I also want the occupation as a label because thenI can philtre my data according to the, um, oreven visualise with different colours according to their occupation.Um, so how do I do that?A, um, allow you to do it.Um, So, um, this little, uh, line of code heresays I can create a node with a list oflabels.OK, so the square bracket indicating this is a listthe first one, everyone is a person, and then thesecond one is dynamic from the second column of thepeople dot CS V.Ok, so now, um, I've created, um, labels.And then I specify, uh, the role, um, as my,uh, node, uh, input.So a list of labels and then, uh, the nodeitself.And then I yield the node and return node.OK, so that's dynamically, uh, creating, uh, labels using a,um and then the next little example.I'll I'll skip this because I need to open upanother database.I want to stay in this database and I'll comeback to it.Um, so the other, more powerful thing, uh, in, uh,a PC is this past expansion?Um, so it can be done in cipher as well,but I'll show that this, uh, apo again is moreawesome than just cipher, um, and then the virt graph.So sometimes you want to, um, retrieve notes that aremulti hop away.So rather than just one hop away, we want relationship,um, that are multi hopped away.So in cipher, you certainly could write this.So a, um, is one hop away from something andthis something is another.Hop away from another thing, and then keep going, andthen until it reach a destination.Uh, B OK, And this is" metadata={}
 
 
page_content="can have as many relationship as youlike in that CS v file.You don't have to separate that into multiple CS vfile in order to create this dynamic relationships.Um, and this empty thing is basically the properties thatyou want to have, uh, for your relationship.Uh, because we don't have any.Um, uh, we don't have any, Um, sorry.We don't have any properties, uh, for for the relationshiptype, we leave it as.And then this, um, is the second person.So you basically have four arguments.Um, the first and the last arguments are the startingand end node.And then the middle two, um, is the role therelationship type and then the properties of the relationship.So once you call that, um, you yield a relationshipand then you return the relationship.So if I run this, I will create the relationships,um, already, uh, in the file.I mean, it doesn't hurt for me to run itagain.Um, because, you know, that's just already, um, relationship created.Mhm.Um, so this one created all the relationships, and, um,so that's dynamic relationships.Um, OK, so that's that.And then, um, the other thing that I want touh, specify is you know, when you or mention iswhen you load people, um, it has the same problem,right?So in instead of, um, you know, just loading aperson, Um uh, in as a person as a singlelabel.Now, with a park, you can create node with multiplelabels.Um, so when when I have the, uh, person file.OK, so the people file, I have the name ofthe person and then the occupation.Um, So instead of just having person as a label,I also want the occupation as a label because thenI can philtre my data according to the, um, oreven visualise with different colours according to their occupation.Um, so how do I do that?A, um, allow you to do it.Um, So, um, this little, uh, line of code heresays I can create a node with a list oflabels.OK, so the square bracket indicating this is a listthe first one, everyone is a person, and then thesecond one is dynamic from the second column of thepeople dot CS V.Ok, so now, um, I've created, um, labels.And then I specify, uh, the role, um, as my,uh, node, uh, input.So a list of labels and then, uh, the nodeitself.And then I yield the node and return node.OK, so that's dynamically, uh, creating, uh, labels using a,um and then the next little example.I'll I'll skip this because I need to open upanother database.I want to stay in this database and I'll comeback to it.Um, so the other, more powerful thing, uh, in, uh,a PC is this past expansion?Um, so it can be done in cipher as well,but I'll show that this, uh, apo again is moreawesome than just cipher, um, and then the virt graph.So sometimes you want to, um, retrieve notes that aremulti hop away.So rather than just one hop away, we want relationship,um, that are multi hopped away.So in cipher, you certainly could write this.So a, um, is one hop away from something andthis something is another.Hop away from another thing, and then keep going, andthen until it reach a destination.Uh, B OK, And this is providing that.You know how many hubs that you're interested in ifyou don't?Then, um, that's troublesome.So even if you know, you know, 10 Hubble Wayis very difficult to write.Using this using this particular, uh, cipher, uh, syntax socipher, uh, provide this pass expansion syntax where you startwith a little star and then, uh, followed by anumber.So this is exactly specifying that I want parts oflens five.Um, And if I put two dots before the number,then I'm saying that I want parts of less partsof lens less than five.Put the dots the two dots, Um, after the numberyou have basically saying part of lens five or more.OK, so this is less than this is greater orequal to OK, so this is, uh what?What?Um, the syntax is telling you.And if you put, um, two dots in between twodigits, you basically specifying, um, I want, um a minimumlength and then, uh, maximum length.Ok, so, um, I have a statement here, uh, whereI can demo it.Uh, so pass expansion, Um, in here.So I have a different name because I don't havein my data set, I have, uh, k c uh,in here.So it's basically saying, um, that, um for Kelsey, Um,I want to generate, um the the the remote friendsthat are either one hop away or two hops away.OK, so I can, uh, run this statement so youcan see that it's quite a messy graph.Um, but this is, uh, the remote friend of, uh,Kelsey.Um, how do we do that in, uh, P uh,in a so pa Apo has something called, uh, apass expander module.So this path expander module allows you to do similarthings, but with a different syntax.Um, so if we do path expansion in a park,so you can see, um I start by matching, um,using the same way as c a and then Ican you guys see?Ok, um, so then I can, uh, call, uh, thisapo pass expander.Ok, so apo dot pas dot expand.And then I specify the node.I specify the relationship.Um, and then I specify, uh, condition.OK, so this condition could be you know, the labels,um, that you wanna, um, add in, um, or thethe, um the labels that you want to remove.So you use plus sign to say that I wantto, um, only retrieve the engineers, uh, known by, um,K c or I only want to return.Uh, you know, the, uh, scientist that known by, uhK C.And then this has to be one or two hopsaway.Uh, so once you have that pass expander, uh, functioncall, you can return the path, and then, um, youcan yield the path and then return the path, sothere's a pattern.Don't forget that you yield the paths from your acall first, and you return the path, you can countthe number of parts, and you can order by, Uh,so the the number of parts is the number ofhops you can order by hops.OK, so if I do this, Hm?OK, so it takes a while.This is, you know, quite messy.Um, that's everything.Sort of, um, using the A O.C um, path expander.Um, right.And then, um, as I said before, you can limitwhat you want to return.So here I have a plus.Mechanics.Um, so, basically, I just wanna, uh, return, Uh, theone, uh, that Kelsey knows.Um, the mechanics, uh, mechanic, uh, person or the personwho are a mechanic as an occupation.Um, that Kel C knows, Uh, that's one or twohops away, and then I can run this, right?Yeah.So only two, uh, uh, mechanics that Kelsey knows.Um OK, so that's that, um And then I canalso, uh, instead of just having one, um, relations.So if you look at this instead of just havingone relation types, I could have, um, multiple relation types.And this multiple relation types is, um, separated by thisbar so follows, um, it with a direction.So this greater sign, I think, is, uh, outgoing.And then if it's, uh, less than sign, it's theincoming.OK, so the outgoing link, um, that has follows typeThat's one of three hubs away.So in my, um, example, um, so I have, uh,knows and follows outgoing and 1 to 2, uh, helpsaway.It's getting big, so it's a bit too slow now.OK, so that's, um, that one, um, about past expansion.Um, and then we also have a sub graph.Um, do I have a sub graph?Yeah, I have a sub graph.Sorry.Now it's so slow now, um, so the sub graphis basically you specify, um, you know, instead of justpass, expand now it's pass dot sub graph, or, um,and then you specify the node.Um, and then you specify the relation philtre, uh, specifythe max and uh, minimum levels with the syntax isslightly different.But you generate the graph, um, as well.So OK, so this is, um, a sub graph ofKelsey, uh, knows, um, people, you know, one or twohops away.So it's It's similar to the pass expansion, but thisis creating a sub graph.OK, so, um, Epoch also allows us to create virtualnodes, um, and virtual relationships.Uh, so, uh, this virtual nodes, they are only storedin memory and returned back to u I.So it's, um, uh, some kind of transitive relationship thatare not tangible.Um, it's basically, um, a visual.Uh, candy, uh, that allows you to see aggregated, uh,way of, um, displaying things.So, um, I have this, uh, virtual relation example.OK, OK, so this is basically just creating it.Um, it's not really doing the virtual one.So, uh, let me.Ok, so this is created, um, I've created I mean,it's a bit messy because I've created, um, Alice, um,as a person.And then I've created, um um and it so So,yeah, I've created not person, but accounts.So, Alice, as a account.And then, um uh, there's another account, Bob.And then I created two, uh, relationships.So one is, um, Alice sent 250 to bob.And then Alice sent 750 to bob again.So this is let me show you so we coulddo basically, um, a virtual relationship.So just copying what we have.Mm.OK, so how about I get out this database?Because it's getting big and not responding very nicely.Mhm.Sorry.I will just stop this, Um, because I need toinstall the epoch library.So while we're waiting for the database, um, to loadup, Um, as you can see that, um, we havea pattern retrieved.So from account, um, sent to certain amount of payment,um, to the receiver account.Ok, so, um, this is, uh, what we have seenbefore, Uh, let me do this.And then now we have, um, basically, uh, returned thefront and two, um, accounts.And then you created a virtual relationship, uh, from, umand then this relationship type is paid, and then wecan sum up the amount, um, and then as aproperty for paid and then, um, created a link tothe receiver account.Um, so this is, um, as a as a relationthat you returned.OK, so this, um, once we open this, we'll beable to see it.So if I have this statement, uh, we are Huawei.So we have virtual relation example, Um, and then Irun it.So I created four labels and four notes, Um, andthen a set of four properties.Um, and if you want to show, um and thenwe can actually see what happens.Sorry.The new project is still releasing my memory.Uh, so why you're seeing all this is because Iactually have, uh, loaded words in here, so and, um,account.Sorry.It's frozen.OK?Oh, just bear with me.So anything about, OK?So as you can see, that I have, um, multipleA and B because every time I just use createrather than, um, merge.So that's that's a bit of a trouble.So I've created duplicate once.Um, but as you can see that, um," metadata={}
 
 
page_content="know, instead of justpass, expand now it's pass dot sub graph, or, um,and then you specify the node.Um, and then you specify the relation philtre, uh, specifythe max and uh, minimum levels with the syntax isslightly different.But you generate the graph, um, as well.So OK, so this is, um, a sub graph ofKelsey, uh, knows, um, people, you know, one or twohops away.So it's It's similar to the pass expansion, but thisis creating a sub graph.OK, so, um, Epoch also allows us to create virtualnodes, um, and virtual relationships.Uh, so, uh, this virtual nodes, they are only storedin memory and returned back to u I.So it's, um, uh, some kind of transitive relationship thatare not tangible.Um, it's basically, um, a visual.Uh, candy, uh, that allows you to see aggregated, uh,way of, um, displaying things.So, um, I have this, uh, virtual relation example.OK, OK, so this is basically just creating it.Um, it's not really doing the virtual one.So, uh, let me.Ok, so this is created, um, I've created I mean,it's a bit messy because I've created, um, Alice, um,as a person.And then I've created, um um and it so So,yeah, I've created not person, but accounts.So, Alice, as a account.And then, um uh, there's another account, Bob.And then I created two, uh, relationships.So one is, um, Alice sent 250 to bob.And then Alice sent 750 to bob again.So this is let me show you so we coulddo basically, um, a virtual relationship.So just copying what we have.Mm.OK, so how about I get out this database?Because it's getting big and not responding very nicely.Mhm.Sorry.I will just stop this, Um, because I need toinstall the epoch library.So while we're waiting for the database, um, to loadup, Um, as you can see that, um, we havea pattern retrieved.So from account, um, sent to certain amount of payment,um, to the receiver account.Ok, so, um, this is, uh, what we have seenbefore, Uh, let me do this.And then now we have, um, basically, uh, returned thefront and two, um, accounts.And then you created a virtual relationship, uh, from, umand then this relationship type is paid, and then wecan sum up the amount, um, and then as aproperty for paid and then, um, created a link tothe receiver account.Um, so this is, um, as a as a relationthat you returned.OK, so this, um, once we open this, we'll beable to see it.So if I have this statement, uh, we are Huawei.So we have virtual relation example, Um, and then Irun it.So I created four labels and four notes, Um, andthen a set of four properties.Um, and if you want to show, um and thenwe can actually see what happens.Sorry.The new project is still releasing my memory.Uh, so why you're seeing all this is because Iactually have, uh, loaded words in here, so and, um,account.Sorry.It's frozen.OK?Oh, just bear with me.So anything about, OK?So as you can see, that I have, um, multipleA and B because every time I just use createrather than, um, merge.So that's that's a bit of a trouble.So I've created duplicate once.Um, but as you can see that, um, Alice sent$250 to Bob.Alice sent $750 to Bob.So that's a little bit too much to to lookat right, Because if we want to, uh, summarise thatwe would do, uh, match.Sorry.This is just waiting for it to, uh, so youyou can try it out.It's not hard.Um, because I think giving the time is running out.Um, I would just rather than demo it.I would just, um, use this as an example.Uh, that's definitely what you're gonna get.Um, because here you have one and two.Um, because we didn't really specify the name.I can assure you, this will be Alice, and thiswill be Bob.And then the property for that, uh, paid is, umuh, $750.Ok, so that almost concludes what we have, um, discussed,uh, today, um, apart from, you know, two slides worthof, um, text, uh, EPOC text functionality.We can do that, uh, next week because that's relatedto, uh, data science.Anyway, uh, so before we finish off, uh, just quick,um, note on, you know, your assignment.Um, let me see, uh, on your project or quickdevice on your project, Um, on what you should thinkabout.OK, so here we have, um, almost like a replicaof the of your relational star schema.Right?So the fact table in in, uh, the middle, andthen you have all these, uh, dimension tables, uh, youknow, beaming out of your fact table.So this, um, could be your initial design.Um, and you can certainly make use of the et l two and then see how it goes.And a lot of people been asking me Should Iuse e t l two?Or should I use, um, a, uh or should Iuse cer load CS v Um, a lot of time.It's a combination of everything.Uh, so you start by looking at your, uh, database,uh, importing, um, or import it inside your graph databaseby using the new four J E T l toolas a quick start.And then you can investigate, for example, in your, uh,in postgraduate, um, we require the zones.So we need to specify you know how one zoneis a to another zone.So this is a separate CS v file that youneed to create by visually, uh, looking at whether twozones are connected or not.So you you need to create, um uh a CSv file with two columns, Uh, Zone one and zonetwo means zone one and zone two are, uh, connectedor adjacent.And then zone one zone three and zone one.Zone four.If this zone one is connected to 234.OK, so the every single row represent a pair ofzones that are adjacent, and then you can use eitherthe load CS v, um, from cipher or using a,uh, from cipher to depend on whether you want tostore any other attributes or not, um, into this schemaok?Into your existing, uh, database loaded by E T.L two.So that's what I said that you probably need touse a combination of this, uh, three different ways ofloading the CS.V file.Um, so that's one thing.The second thing is, you know, how do we actuallycount?How do we aggregate from, uh, you know, a date,um, to find out, given the particular date, how manycrimes we have.OK, so you think about the Cypher query that youactually match, uh, the exact date with the pattern ofhow crime is related.OK, so and then you count the number of crimes,so it's a simple kind of query, but then takeit one step further.Think about your concept hierarchy.Think about how your date, um, concept priority could have,you know, month, quarter and also, um, yeah, OK, soWhat if I want to aggregate?Um, an entire year of a number of crimes?So should I use virtual node like I discussed before,or should I make use of, um uh, uh adesigned physical node.OK, so if it's a physical node, um, it meansthat your graph schema is gonna be quite complicated.So you're gonna have, um, a month node a yearnode, a quarter node.So, um, that of not just one, but a typeof, uh, month notes.So every single month, um, you will represent it asa note.Um, so it's convenient in terms of queries.So, from you know, January, uh, 2010, I'm linking tothe crime ID.So I'll be able to aggregate and find out thenumber of crime or the type of crime that happens.Um, in that month.Ok, um, so that's one physical design that you actuallyintroduce a new label, which is month.You introduce another new label, which is, um, a yearand then another label, which is quarter.So that's just along the date dimension.You can do the same thing for location dimension, forexample, Uh, but on the other hand, you also havethe epoch virtual nodes and virtual, uh, path.Um, so you could calculate those virtual nodes as adisplay candy?Um, not, um, as the physical implemented node.So think about those, um that will, um, help youstructure, uh, your, um your design so that you cananswer all the queries that we have there.Ok, All right.So that's all from me.Thank you so much for your attention.And I'll see you next week.Uh, for rough data science.No, such a beautiful place.I've never seen you know, something as beautiful as thatconference as well.Had a great time so much and yeah, yeah, yeah,yeah, yes.Yeah.So within the graph database, it contains a" metadata={}
 
 
