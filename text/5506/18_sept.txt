Looking towards a cloudy future, Uh, so obviously about cloud

computing, as as, uh, doctor man alluded to I used

to work for Microsoft.

My background is in is in cloud computing.

Um, just some highlights there, which we've kind of covered

already that you know, I've been around for a while.

The grey is here for a reason.

I used to work at Microsoft until about a about

six or seven months ago.

Uh, and now I work for a consulting company at

the centre of town.

But as you see there, my journey in the cloud

has been about 10 years, if not a bit longer.

Uh, so, um, mostly in the Microsoft field, but, uh

but, you know, I've got an appreciation of other things.

So this is what I'm going to talk about today.

So how did we get to where we are with

the cloud?

Let's start with what it is, you know, some complexity,

um, transformation.

So what what part does, um, does the cloud play

in digital transformation?

Who's done it?

Well, so some news cases and what's some stuff that's

coming?

And then the final thing I'll probably just touch on

at the end.

Uh, which is you know, where my journey has taken

me and some of the things that are happening in

the industry, particularly in Perth.

Um, obviously, we're all here in Perth, and, uh, we're

probably all looking to maybe even in in the future,

take a take a role in Perth.

So some of that as well, probably a very brief

conclusion at the end.

And I'll I'm trying to aim for about 45 minutes

presentation, so there'll be plenty of time for for questions

at the end, and at the end there will be

my email address.

So let me just, uh, say now, and I'll repeat

that at the end that if anybody wants to reach

out to me after this lecture, then please do so.

So how did we get here?

So I, uh I got picked up by by Dr

Mansour in the, um, in the computer science department, and

I could see all the equipment in there.

You know, all the old stuff, data processing things and

things like that.

But I'm gonna take this journey not quite that far

back, but things like like the mainframe.

So if you think about the old days, it was

a big computer in a back room that had a

screen at the front.

The screen terminals you may have seen, I don't know,

uh, that you interacted with, um you may have submitted

jobs to that, and it would run in the back

end.

So that was kind of how that kind of idea

of of large scale computing, I suppose, from a business

perspective, started home computers.

So I grew up in the eighties.

Uh, one of the things that I had was a

was a Commodore 64.

So those kind of, um, computers that allowed you to

actually start doing things that weren't just playing games because

consoles had already existed, but writing games, learning code.

Of course, the next transformation of that was P CS

the personal computer.

So taking those home computers and moving those into the

workplace So that was kind of, I suppose, towards the

end, almost like the death knell of of a lot

of the sort of old, dusty mainframes.

So moving those applications from that back end office to

the to the front end on your on your actual

computer, I guess the next piece of that evolution was

kind of client server where you had your own computer

was no longer the thing that was doing the work.

It was a server in the back end.

That sounds awfully like a mainframe in a lot of

ways, right?

So were we starting to move towards that paradigm again?

I guess, to a degree we were, And the next

evolution of that was taking those servers that were in

the back end and putting them somewhere else and putting

them somewhere else at large scale.

So that's the cloud.

So you think about that.

You go mainframe, where you've got big amounts of computer

storage in the back end, and you're just interacting with

your with your with a front end screen through having

it on your desktop to your you know, in a

server room, somewhere to back to almost kind of that.

That same sort of paradigm where you have that mainframe

kind of thing going on?

Uh, well, of course, it's a lot more complex than

that.

So what is it?

What is this thing called Cloud?

So I asked Chat GP T.

It's great productivity tool.

So it says, and I'll read it off the screen

up there.

Cloud Computing is a technology that allows users to access

and use computing resources such as servers and storage over

the Internet.

Again, that sounds very, very similar to that to the

definition of what client server traditionally was.

Computing and, well, servers and storage.

So computing and storage resources over the Internet, so not

over your own internal network but over the Internet.

So this idea of a cloud that is hosted by

somebody else I'm not sure I particularly like that definition,

because I don't think it goes quite far enough in

terms of defining what the cloud is the cloud is

so much more than that.

So with that in mind, I thought we'd just wonder

through what typical kind of cloud services there are.

So in the traditional sense of the thing where you

have your on premises solutions, you're responsible for everything.

Everything from the storage, your hard disc, all the way

up to the applications and the data that's running on

them.

So you are responsible for hosting and managing and operating

all of those things, which is why operation centres are

very big and they involve a lot of people.

Ah, the first evolution.

This is probably where Amazon played.

The biggest part in the early days of cloud computing

was in infrastructures and service.

So taking those servers and putting them somewhere else that

had already happened in terms of data centres.

But managing large scales of that infrastructure on your behalf.

And when I say large scales, I mean all this

stuff is built on really, really cheap commodity hardware, so

things break over time.

So having that ability to self heal in those kind

of scenarios a fabric that sits underneath that allows self

healing is is kind of where that infrastructure as a

service sits in, and it meant that essentially you manage

the rest.

So the virtual machine and the applications and everything that

ran on it, the next evolution of that was platform

as a service.

And this is kind of where Microsoft came in with

their Microsoft Azure cloud.

So you've got Amazon Web services very early in the

infrastructure as a service and then started adding platform services.

Uh, Microsoft came in much more in that platform as

a service model, although they do both, of course, anyway.

But there you're going much further up the stack.

And in fact, all you're managing is the applications and

the data that runs in them and, ideally, a deployment

mechanism that gets those applications and that data out into

the real world and then the final one.

The other final type of service is software as a

service.

So think of things like sales force.

Think of things like Microsoft 365 that includes the office

suites that we probably all use.

All of those are hosted by Microsoft.

So one drive, for instance, I don't know if you

use one drive here and that that ability to move

things around.

Um, but all that is software as a service.

So essentially all you're managing is the data and the

access to that.

So that that that's kind of like the paradigm shift

of of of, uh, the way that the cloud has

evolved, I suppose.

Early days, infrastructure as a service, much more platform as

a service nowadays, uh, and then software as a service,

All of these types of clouds, All of these models

still exist today.

So if I was to go onto the azure portal,

I'm a Microsoft person, obviously.

So I use azure.

Um, I just I just highlighted web and mobile, and

you can see the amount of, um, solutions that there

are there.

Right, That's just web and mobile.

You know, if I go, these are these are platform

services and you can see the the various sections there.

There's 304 100 of these services now, so think about

that platform as a service and think about how you

can deliver applications in that environment and how you can

choose no longer to to, um, have the hardware layer,

but actually go all the way up to the application

layer and actually compose your applications based on services that

Microsoft is running, or Microsoft or Amazon or Google or

indeed, Oracle, Or insert your favourite cloud customer platform of

choice.

But one of the big transformations that happened with the

concept of capital expenditure.

So I've got a bunch of services.

They're sitting in my data centre or in my coms

room.

I've paid for them.

So I'm going to keep those for seven years.

Fantastic.

And and, you know, as time goes by, they'd appreciate.

And at the end of the day, I buy some

more stuff.

Capital expenditure.

What the cloud did was come came up with the

idea of operational expenditure.

So I'm no longer buying things up front and then

using them and using maybe only 10% of them 15

20% of them, because I've had to over provision what

I needed, because I don't know what my future load

will be.

And now I'm operationalize that so I've got to the

point now where I'm having this this concept of operational

expenditure where I'm maybe paying as I go or paying

a monthly fee rather than paying thousands of dollars for

servers upfront that I may never use, or I'll use

maybe just a portion of them.

Yeah, So the other thing that the cloud brought was

scalability.

That's the image on the left hand side.

I've made excessive use of icons in this presentation, by

the way, so I make no apologies for that.

So the idea being that when you put something on

the cloud, if all of a sudden you need more

of it, it will just auto provision it and you'll

have that available to you.

So scalability, metering.

So the ability to be charged almost like a micro

billing engine that charges you based on what you're using.

If I'm using a database for three hours today, I

only want to pay for that database for three hours

today.

I don't want to pay for the entire database that

I'm never going to use for the rest of the

hours of the day and so on, Right?

So so that's a key key metric of that operational

expenditure.

It's not just this is how you do it.

It's how you get billed for it.

And obviously from a charging perspective of the cloud providers.

This is a key critical thing, because this is how

they make their money.

And the other idea is availability.

If you've got a data centre somewhere and you know,

say you open a business in the US, do you

want people to have to come to your machines locally

in order to get access to them in the US?

Do you wanna have it so that you have something

in the US as well as here?

So it's available in more than one place.

Do you want to have it so that when something

fails in your local instance, it automatically moves to something

else?

So as an example, Um, and I can again only

speak for the Microsoft side of things.

Microsoft has a data centre in Melbourne, and it has

a data centre in Sydney, and it's got a couple

in Canberra as well.

But those are the two main ones.

It's normal that for from a reliability and availability perspective,

you'll deploy to both of those, so that if something

goes down in one of the data centres, remember, this

is all built on commodity hardware.

Things break.

Uh, then it automatically switches to the other one.

So you have that availability as well.

So you've got, uh, elasticity, scalability, metering and availability as

well.

So how do you deploy cloud?

I mean, we've probably all I mean, I don't know,

maybe maybe we all have.

Maybe we haven't.

But we may have all been on, say, the AWS

portal and played around with some services or the azure

portal and played around with some services.

But that's really just how the cloud is.

How do you deploy these things to make sure that

you're being an effective users of the cloud.

So this is a very traditional view.

You have your on premises hardware, right?

What you might do is you might go to a

third party provider.

Next.

DC is a good is an example of one that

that's based in in in W A.

And if you're ever driving around the Grand Farmer Freeway

in that big sort of black, white and red box,

that's the next DC data centre.

They host a cloud for other people, right?

So essentially what you're doing is you're extending your business

into that cloud.

So that's called Private Cloud.

The next one shameless use of the azure logo there,

I'm afraid, is public cloud.

So this is where you can go on.

You can deploy a website of your own, you can

use their services and a lot of people use this.

There are some security questions around this because it's public,

so things have So, for instance, if you're running a

website, it may have a public IP address.

If it has a public IP address, can it Can

you use port scan all the various tools that the

you know, the films and the hackers use, uh, to

get access?

Right.

So there is some degree of risk, shall we say,

with uh, with the idea of that public cloud, The

next evolution to that is hybrid cloud.

Now, this is a game where you're extending that network.

But you're not extending it into a data centre that's

owned by, say, a third party data centre provider.

You're extending your network into the cloud providers network, so

in this case, it's azure, but it could equally be

AWS or or Google cloud.

And essentially, what you're doing is you're you're taking your

your your your workload, and you're using public cloud infrastructure.

But it's hosted inside your own network.

OK, so that's what the little symbol on the bottom

is.

It's secure.

So you're extending your virtual networks and everything that that

networking and trafficking infrastructure that you may have, uh, in

your own, Um, uh, in your own business to the

cloud and using that to to route your traffic So

that's much, much more secure.

But if you look down Saint George's Terrace, all the

big buildings Rio Tinto South, 32 BHP and a bunch

of others they don't really.

Whilst most of them have structures that are built around

hybrid cloud, the majority of them actually run multi cloud.

So what does multi cloud mean?

Multi cloud means you're using more than one cloud, of

course, right.

So as an example, you'll find some industries will use

Amazon Web services for their data, and they'll use azure

for their applications.

So they get that separation.

So they're trying to get the best of both worlds.

There are cost implications of doing that.

You don't pay to put data into a cloud provider,

but you do pay to get data out of a

cloud provider.

So if you've got data in, for instance, Amazon Web

services and a and an application in, um in Azure.

Every time that application calls Amazon Web services and that

data comes back, you're being charged as that data leaves

the Amazon, um, infrastructure, right?

So and vice versa.

Right?

So there's that there's that kind of cost metric that

you just have to be aware of.

And that's true of any cloud provider.

By the way, um, you know, you always have to.

You have to be aware of cost and going back

to that Capex and Opex.

Um, example.

One of the biggest things that people have found because

it was great transformation.

Let's move from capital expenditure to operation expenditure is the

idea of sticker shock.

The idea that that you don't know how much you're

gonna get charged because you're being billed on a weekly

or monthly or hourly weekly or monthly basis.

So it's it's kind of intangible as to how much

you're gonna get charged.

Hopefully, you'll be charged a lot less than you're paying

for your servers because you're using the right amount to

compute.

So that's all very good.

We've done machines.

We've done applications, but how about some more interesting stuff

that's coming or that's currently, um, I guess, advanced workloads.

So the first thing I wanted to talk about, which

is a bit of a weird one, because it's not

really cloud computing.

As such, it's more software as a service, But still,

cloud computing, in a way, is code code to no

code or low code.

So an organisational an organization's value.

In the old days, people always say our people are

our most important asset, and arguably that's probably still the

case.

But there is a certain argument that says, You know

what?

The data that that that that organisation holds is the

most important asset.

Maybe it's to do with their finances.

Maybe it's to do with how they get stuff out

of the ground.

If it's a minor, it could be anything right.

But the point is that data is really, really important.

The problem with it is, is when you write an

application, Um, and I won't ask for anybody who's, um,

who's used to writing things like JavaScript and various other

things, right, But, uh, but essentially, when you write an

application, it can take some time because it's all bound

into that code that you're writing.

The problem with it is is, as I say, that

takes time.

It takes skills, sometimes those skills, particularly around some of

the techniques around.

And I chose JavaScript for a reason.

Um, JavaScript has this sort of rolling framework idea.

So you know, you may use one framework, and then

you'll go to another job and you'll be using another

framework.

Uh, maybe that previous framework is no longer quite so

popular as it used to be, So it's harder to

get skills if it's hard to get skills.

Those skills are more expensive and so on and so

forth, right?

So it's a knock on effect.

So if we can take that code away and make

it easier to build an application, it means you'll get

access to that data, which is the core asset of

your organisation.

Remember more quickly.

So the idea is, is that you move from a

code environment to a no code environment or at least

low code, and there's a few of those around, Um,

Microsoft has one called the power platform, but there's a

bunch of others as well.

Uh, but the idea being that you have a bunch

of compos components that allow you to build applications really

quickly to get access to data because that is where

your value is.

So it's that time to value, so that's really, really

important.

The other thing that's flipped things on its head in

the last two or three years, uh, is containers, so

that's an icon of a virtual machine.

So think about a virtual machine.

You've got an operating system.

You've got runtime, maybe the dot net runtime, java runtime.

Whatever it is that your application is running on, you've

got applications on top of that and so on.

It's it's a whole machine that's doing a lot of

things.

The problem with it is, is your application may only

use 10% of the CPU.

It may only use 5% of memory, so if that

if that machine is dedicated to doing that piece of

workload, it's a lot of stuff that's going to waste.

So the idea came up to create this this concept

of layering your application, you know, maybe you want just

a slice of the operating system at the bottom or

the CPU and the and memory.

Maybe you want a splice of a run time.

You don't want the whole thing.

Maybe you want a slice of the application and so

on.

So this introduced the idea of a container right where

you've got a bunch of layers that you build up.

And the nice thing about containers is that whereas a

virtual machine may be dedicated to one application with containers,

you can create density.

So you'll have many, many applications running on the same

machine because they're sharing only the resources that they actually

need rather than a vast quantity of resources.

This led to a I think called docker.

I don't know if anybody here has heard of Docker.

Uh, but essentially, it's It's an engine that allows you

to to to essentially control to a degree, uh, the

way that you interact with, uh, with containers, some of

the logging and so on.

The next evolution to this, uh, was the orchestration of

containers you can imagine from a Web perspective or from

a cloud perspective, more generally, I talked about self healing,

the ability that when something breaks, it can automatically provision

a new instance.

Well, there are engines that sit above do the the

most famous one is probably called knees, which allows that

exact process so that orchestration of your resources, the problem

with it is, is when you run those in your

business.

It's a very, very key skill, and it's a very,

very expensive skill, and it requires several people.

So there's been a move away from creating, You know,

that sort of stuff in your own environment and moving

it to the cloud.

So the idea that containers and that idea of cloud

native, which is the phrase that's very often used in

the same well, interchangeably, I guess with uh with with

containers is that you're building applications with containers.

You may have also run those on premises, but you

no longer do.

You're pushing them up into the cloud, so it's a

very similar story.

So think about the way that applications were, run them

on premises, move them into, say, virtual machines and then

into the cloud.

We've kind of done done a similar journey with um

with containers over the last probably two years, rather than

about 10 years or 15 years that we did for

for other computing and now you know, and and Doctor

Mansour knows this is one of my, uh, my favourite

topics.

IOT.

So the key thing about IOT is sensors are everywhere,

right?

I don't know if there's sensors in here.

There probably is.

Um, but, you know, typical things may be light sensors

when occupancy sensors.

And when someone comes in, a light comes on, it

could be temperature.

It could be CO2 in in mind sites, for instance.

It's volatile organic compounds.

Is there something that's going to cause harm to a

person?

There's a bunch of things so streaming that data to

something where that something could be a gateway, it could

be a computing resource.

I'm gonna talk about computing a bit later on prov,

providing some analysis of that doing something as a result

of that analysis and that doing something, maybe flicking a

switch, you can imagine that there's a lot of things

going on there, right?

But the key thing here is why this is enabled

by Io.

Iot is enabled by the cloud is because there are

vast quantities of data going through here.

So if you think about a typical mine, a typical

mine in its in its or a typical mine or

or processing plant may have 100,000 sensors in that in

that area, they may be repeat, uh, reporting everything from

one second, five seconds, 10 minutes, 15 minutes.

Whatever.

That's a vast quantity of data that's moving around without

cloud resources and a place where you can store that

information.

How do you then process and get value out of

it?

It's all well and good storing the information, but the

whole point is the reporting and some form of automation.

So the cloud has enabled that sort of thing.

The only problem with this particular scenario and this is

the scenario has been around for a long time is

it relies on the maturity of an organisation.

So if you imagine this is a maturity curve, on

the right hand side of that picture is an organisation

that knows what it's doing with all its large volumes

of data.

On the left hand side is people who know that

they've got data, don't really understand it, don't really know

how to govern it don't really know who owns it.

What I did is it made all this data available,

but It also made a lot of the organisations realise

that they're down this end of that curve, not that

end of that curve, right?

So it's taken organisations a lot longer to get to

the point where they're productive.

With that data, they can view the data, they can

run reports, they know what's happening, but they can't go.

OK, well, when this happens, I want to have an

alert.

I want to schedule somebody to go out on site

that kind of predictive and prescriptive approach, which is what

you want to get to on that far side.

They haven't had that kind of level of control.

So the next one?

Not surprisingly, you can't have a conversation without talking about

a I right?

I quite like this, RC Clark quote.

It's, um it's I.

I use it very often.

Any sufficiently advanced technology is indistinguishable from magic.

So a quick show of hands who's used chat gpt

Yeah, quite a few.

I won't ask who use chat GP T to answer

questions to Doctor Manso's lectures.

Um, because that wouldn't be fair.

However, right, I think the key thing there is that

we are moving forward with this technology.

So I want you to just remember the story I

told about IOT about how people aren't really there with

that maturity curve just yet.

There's even now they're not.

They're still struggling with how to get real true value

out of the data, although it is coming.

But how has the cloud enabled this?

So who likes playing games?

Oh, a lot.

A lot less than I thought.

Actually, if I'm honest, Or maybe you just don't want

to put your hand up.

Perhaps, but, um, to the core of most consoles and

and, um, gaming on laptops and so on and so

forth is GP U graphical processing UN.

Turns out they're also really, really good at running machine

learning models.

Really, really good, because they're super, super fast and efficient.

So imagine if you take one of these like you

have in your laptop and you multiply it many, many,

many, many times, right.

You can imagine that if you're throwing this amount of

computes had a problem.

You're kind of back in those days of that.

That sort of dusty, um, supercomputer that you may have

had in your computer science department, which you submit a

job to, and it came back with an answer three

weeks later.

Except I speak from experience.

Uh, except it's no longer three weeks, right?

But the key thing here is not just this, but

imagine building an entire data centre built out of this.

So just as an example, right Open a I, the

company that's behind Chat GPT the original models for GP

T or GP T three.

Open A.

I introduced one called GP T 3.5 which is a

bit more efficient.

It's only got data up till the end of 2021.

The latest one is GP T four now GP T

four has billions of parameters.

So when it's making its predictions as to the next

word that it's going to push out, it makes a

lot of calculations.

When Microsoft invested in Open AI, they built a data

centre full of GPS, so as Chat GPT four could

be trained.

So that's the entire data centre just to train one

model.

So that's why cloud computing is so important in these

environments.

They literally built a data centre to train a model.

Now, once that model is trained and you use that

model.

Obviously, you don't need to train it the game, so

that's OK.

But you still need access to that kind of computing

power in order to get to the point where you're

where it's useful.

So what other things are there, right?

And I'm sure some of these things may have already

been covered by some core stuff, anyway.

But, yeah, so machine learning.

So think about linear aggression prediction.

Here's here's a bunch of data.

Let's draw a line through the middle of it.

And then when I want to know an answer, I'll

ask it what the value is at this particular point

in time.

Random Forest.

There's a bunch of techniques for that.

For that right?

Neural networks.

So think your brain synapses nodes joining together.

So getting a force multiplier essentially in the ability to

predict and do other things right, So that kind of

plays into the next two as well.

Classification.

Is this a dog?

Is it a cat?

Very simple is that person who's coming through that security

gate at my mind site wearing protective glasses and a

protective hat, a hard hat that's actually a real case,

a real user use case for that for that kind

of thing?

Are they wearing their their P PE natural language.

So natural language in its in its own right is

a very complex story.

But imagine, say, and and again just speaking from experience

of a AAA piece of work that I did imagine

an insurance company which wants to be able to predict

whether it will lend you insurance if you've got a

chronic illness.

So you're typing in, You know, I've got I've had

a heart attack in the last two the last two

years.

I'm on these drugs using those drugs to look up

other things and so on and so forth, understanding that

there are certain precedents to words in the sentence, depending

on the language you're using, of course, uh, to get

value out of that so that you can make predictions

and make judgments.

And then, of course, everyone's favourite.

As I've mentioned, chat GP T at the moment generative

A I so that ability to generate new content based

on a question.

That question is very often called a prompt, of course.

And yeah, Doctor man and I were talking just beforehand

around prompt engineering going to be a huge thing, knowing

how to ask the right question to get the right

outcome, because you can't just go Go give me the

answer to this question.

I mean, you can do.

But if you ask that five times one, you'll get

five different answers.

And two, depending on what you ask, you may not

get what you think you're going to get.

Uh, the example that II I told Dr Mansour was,

If I go on to chat GP T and I

say, you know, give me a two paragraph summary of

Martin Abbott, who used to work at Microsoft from his

LinkedIn profile.

It absolutely does that.

And then he say, Can you please tell me where

you got this from?

He said, Oh, it's completely made up.

I don't have access to the Internet because it doesn't

have access to the Internet.

It's a model that's sitting in a data centre somewhere.

It's not reaching out to the Internet and finding those

answers.

It's based on the information that was used to train

that model.

So your mileage may vary, and what you get back

is what's called a well.

If it's if it's wrong, it's called a hallucination, which

I think is a great name.

So if, uh if the data is wrong, it's hallucination.

Previously, I showed, uh, an image of yeah, the services

that you get in a typical cloud provider, just the

red on mobile.

And this was just a very quick screen grab from,

uh, Microsoft Microsoft Aures Machine Learning Studio.

Uh, there's pages and pages of these models, right?

So if you think to yourself, OK, well, I want

I mean, these are only you can see there's GP

T 3.5 Turbo llama at the top.

There is is Meta's language model large large language model

that's hosted on Azure uh, GP T four.

You see a lot of these to do with text

generation and completion.

That just happens to be the the this particular view

I could have.

You could have clicked the vision models at the top.

There's hundreds and hundreds of these models that are trained

and ready to go, so you don't have to train

them yourself, right?

So this is great for an environment or an organisation

that doesn't want to have 25 PhD students who have

got data, science, backgrounds.

They want to be able to get that kind of.

And it's it's, you know, we we we turn this

to kind of like democratisation, democratisation of models, the ability

to have somebody else build these models and make them

available to you.

I also just wanted to show an example of chat

GP T.

So I asked chat G BT to come up with.

How do I don't really know Python Very well.

How do I know how to call an API in

python?

I don't know.

I'm a C# coder, right?

I kind of roughly knew.

So it came up with a bunch of instructions.

But of course, the key point here is this code

is auto generated.

It's based on a best guess.

So you can absolutely paste this into a notebook or

something like that and run it and it may run,

but equally you might not.

So you still need to have some knowledge you still

need to read.

And I'm I'm waiting for the press release where somebody

creates.

Wait.

I mean, maybe I'm alone here.

Uh, we'll assume that I am, um if you're a

if you're gonna write a rage email at work.

We all know that when you write a rage email

at work, you don't include the person that you want

to send it to because you might accidentally click send.

And you don't want to do that, right?

Yeah.

There's already been people going.

Oh, this is gonna be great.

I'm gonna write in what my rage email is and

tell Jack Ah, chat G BT to give me a

calm down version of it.

But of course, if you copy and paste that and

send it because you think it's OK and you've never

read it, you have no idea what that said, right?

So So you know the key thing there is?

Yeah, chat.

GP T is a great tool.

But with, you know, great power comes great responsibility to

throw spider-man under the bus.

Uh, so essentially, you know, just be careful that you

make sure you reread what it's telling you because it's

making guesses, right?

And that's the key point of of all those things.

But just to give you an idea of how this

all plays into into azure specifically, uh, but it's equally

equally the same as AWS There's an IOT and an

A I solution, and you can see there's a lot

of moving parts there.

Imagine if you had to build some edge devices.

Imagine if you had to build your own digital twins,

which is a which is a digital representation of a

physical space or a physical environment.

Imagine if you have had to build your own databases

and various other things and you can see there's a

lot of things going on here, right?

That is the power of the cloud in one slide.

I can just join these things together through connection strings

through networking, and I have a workable solution.

I don't have to build all this stuff ever again.

However, you can imagine that if you're building a lot

of things and you're censoring and all these sorts of

things, Uh, who's watched Live free and Die hard, Live

free or Die Hard, the fourth die hard movie, one

person at the back.

This is a quote from there, right?

It's a fire sale.

What's a fire sale?

It's not one of those right.

Everything's connected.

There is There is work going on right now to

make sure that this never happens.

The US government have got classifications around critical infrastructure.

The Australian government has got classifications around critical infrastructure to

make sure that that, you know, the there are essentially

cut off points by which you can terminate connections and

so on and so forth to make sure that somebody

can't take over your infrastructure.

Which leads to the next question.

How do you make sure you manage all these things?

Responsibility.

We all work in environments which are sort of multifaceted,

I suppose.

Um, I work in an environment where I've got a

bunch of work colleagues and we have to act responsibly.

Of course we do, right?

You can't just walk around the office shouting all the

all the time.

What happens when you add an A I to that

you know something that's been developed and deployed, which you're

in less control of.

How do you make sure that there's responsibility around that?

A.

I There was a story a few months ago.

Um so a a bunch of a bunch of mitigations

have happened as a result of this, by the way,

er but stable diffusion.

One of the image generators, um, was being used to

create child abuse photographs, which will then be distributed so

responsibility.

With great power comes great responsibility, right?

So there's a huge piece of work that is still

yet to it's being done now.

It's still yet to be done about responsible a I

and making sure that these things don't create, you know,

a future that's bound by Terminators.

That's a very, very important.

It's a very, very important area that's evolving right now.

And it's certainly an area just to look at, uh,

from a from a career perspective, absolutely.

And the next part of that is is ethical.

A.

I so again going back to, um, the example of

stable diffusion, which is kind of like a bit of

responsibility.

Don't let it do things unethical as in, you shouldn't

be using it to do those things, either.

So it's both aspects.

Excuse me.

So it's very, very important that you cover both these

bases, right?

Right.

Chat GP T.

Thank you very much.

Um, digital transformation is the process of using technology to

fundamentally change and improve business operations, customer experiences and value

delivery.

So what the cloud has brought is this opportunity to

do things very differently.

So you know Iot and its and its respective technologies

have introduced the idea that I no longer have to

worry about.

In two months time or three months' time or four

months' time, I'll be able to do something.

I can predict it, which means I can build a

service around it, so it's transforming the way I do

business with my customers.

Digital transformation also implies internally, so there's a bunch of

stuff coming out on Microsoft 365 soon all around, copilots

the ability for it to help you and provide productivity

gains.

So all these things are transforming the way that businesses

work.

The very issue with that idea and that digital transformation

paradigm is it creates problems.

So the first one is people based change management.

People are worried about their jobs.

Will I have a job tomorrow?

The answer is yes.

You absolutely will.

Your job will probably just change.

Good example.

Rio Tinto, when they introduced their trains, didn't fire a

single driver.

What they did is they said, OK, drivers, you're no

longer on the trains.

You're at stations in between because if the train breaks

down.

I need you to go out there and drive the

train, so just transform their job right.

So change management.

And that applies across the whole business.

Anything from admin staff all the way through to front

line markets, security, encryption, access to data.

You know, if suddenly everything's up in the cloud, you

start getting worried about what's happening to your data.

Is it safe?

Is it secure?

Data migration?

If I push my stuff up into the cloud, how

do I get it from where it is?

That is a very, very complex problem, because you may

want to transform the way that you hold and store

data.

Who's responsible?

You know, if you're doing data migration, you probably need

to know the right person to ask about that data.

So that's opened some real gaps in businesses and integration.

Favourite subjects of mine.

How do I move stuff around when I'm in the

cloud?

The cloud is also inherently built on infrastructure that can

break.

How do you create durability between things between processes and

services?

That's where integration comes in.

So just some, um, some examples of who might have

done this well, so agriculture is very, very big.

Uh, with with, um, some of these key technologies.

I pro chose this one because it's got a drone

on it, which is not only cool, but actually there's

There's large organisations that fly a prescribed path around your

farms.

Take a vegetation index how green your farm is and

can predict roughly how much fertiliser you'll need in the

coming season.

Great use case Mining truck.

There's a remote operation centre for Rio Tinto out of

the out of the airport.

Big, big building where all they do is monitor the

trucks going up and down the, uh up and down

the mines.

Interesting outcome for that which I hadn't considered.

If you have these very, very big trucks with wheels

that are you know this wide, then when they're driving

up and down the mine, each truck drives a slightly

different path.

It might only be out by six millimetres or 10

millimetres.

But you can imagine that if every truck bearing in

mind is weighed hundreds of tonnes by the time they're

full of oil, um was driving the same path.

It would just where deep ruts into the path.

So things like that that you have to think about

health care.

Of course, health care is an area that I would

say is probably evolving because, you know, there's concern about

your beta and so on and so forth medical records.

But there's already used cases around things like fall detection

in, in, in home care, right?

So, you know, if you've got an elderly relative who

doesn't want to go into A into A, um, uh

into a care centre because they want to stay at

home because that's what they've known.

It's very important at an end of life to to

to, uh, make sure you follow the the the the

requirements of these kinds of people.

Um, you know, provide the care that they need full

detection.

So when they fall, someone's alerted pill boxes, intelligent pill

boxes.

So you know that somebody's taking a drug that day.

Those kind of things very, very important.

All right, what's coming?

So two of these are already in place now, but

but beginning to really rev up so edge computing.

I mentioned before about the IOT use case gateways and

all that sort of stuff.

Imagine a scenario where you're working at, say, a gas

plant up in the north of, uh, north of Western

Australia as an example, and you lose connectivity to the

Internet.

Can you imagine what would happen if your sensors had

to send something to a gateway?

Send something to the Internet to get an answer to

shut that valve?

Because maybe there's an over pressure or something like that.

So you can't always have that luxury of sending things

to the Internet.

So that's where edge computing comes in.

You may still run some of those platform.

We type services around data models and and machine learning

and so on.

But they'll be running closer to the point of need.

It doesn't sound very cloudy, does it?

That particularly, but it still is.

Five G.

I'm sure some of us have phones that have got

five G capability.

That's a commercial device as a consumer device.

Imagine a scenario where you've got five G coverage across

the whole of Australia, which can, you know, take speeds

up to a gigabyte, uh, great for playing games, obviously,

but, um, but, uh, also great for making sure that

you have that maintained connectivity.

Quantum computing, that is gonna be the next leap.

I think in our ability to process GPS are all

well and good.

But quantum computing.

We already have quantum computers.

They're just not scaled yet.

And the last one collaboration.

Robotics.

Cobos.

We've seen the manufacturing machines that put cars together.

That's fine.

They have a prescribed process.

They're programmed.

What about those bots that sit next to you?

It may be an automation agent on your screen.

It may be a physical thing that actually help you

do your job.

And don't only just help you do your job, but

you interact with them as well.

That's very, very new.

The idea of cola.

And with a few minutes left, I just started to

go through my journey.

Um, so I mean, this was alluded to already.

I did a conversational fors.

I moved into IT in around 2000.

A little bit before that.

Possibly I started doing Dev around about that same time,

actually, uh, then I moved to Australia in 2011, joined

Microsoft in 2020 I'm now somewhere else.

But that industry has transformed over that period of time,

right?

Whether that's due to things like the global financial crisis

where everybody's panicking.

IT always plays a part in that sort of stuff.

Covid I can't go to a place where I need

to go.

So therefore, I solved that problem by remote working.

It solved those problems.

It continues to solve all these problems.

I mentioned about the fact that machine learning, I don't

think, has delivered the value that it could have done

just because the maturity is still being worked out.

A.

I is completely different to that.

A.

I is everywhere already, whether you use chat GP T

whether you'll use any of the copilots that Microsoft is

bringing to the table.

Yeah, it's everywhere, so I think that's already embedded.

And that's where that's where we're gonna see some transformation.

I've mentioned prompt engineering.

I've mentioned responsible a I and ethical A I.

They're probably less IT and more, uh, governance and policy

based but Perth and in fact, other cities around the

country.

Perth is a resources town over east.

They're more financial and and, um, insurance.

But all these technologies play a part in all of

those places.

Most large scale organisations have internships.

They're definitely worth looking into once you finish because it's

a great way of on boarding and and continuing your

learning.

Uh, the one thing that, um, that sartan Nadella the

the CEO of Microsoft, uh, introduced very early on when

he took over from a person who was completely the

polar opposite of him.

Steve Balmer was this concept of the growth mindset rather

than a fixed mindset.

You're all here.

You're here because you want to learn, right?

Life is an ongoing journey, and I don't mean just

physically and mentally.

I mean, you're always learning, right?

The idea that you learn something new every day is

true.

It absolutely is mean.

Hopefully you've learned something today, Uh, but I think the

key thing there is that the industry is transforming and

it's still changing.

But now is a really good time, certainly in Perth

to have some no foundational knowledge in these sorts of

things because there is a lot of opportunity out there.

The world is your oyster.

I suppose I was gonna conclude, But I've been talking

for quite a long time.

I was just gonna say how how how great cloud

computing is and it is, um, but I think the

key thing here is that whilst cloud computing is is

in love itself has been transformational.

It's allowed organisations to change the way that they use

their infrastructure.

Uh, and the way they build applications.

I think we're really hitting peak transformation now with cloud

computing.

So that idea that large scale computes can be used

for other things, whether that's machine learning models, whether that's

a I Right.

So we're really at this kind of inflexion point where

I think we're going to see the true value of

cloud computing as we go forward.

And with that, I'd just like to say thank you,

Uh, and thank you to Dr Mansour for inviting me.

And thank you for all listening to the, um, chat

For what?

About 45 minutes or so.

Um, and I guess if anybody's got any questions, please,

I before I go back, if you want to take

a slip of that slide, that's my personal email address.

As I mentioned, um, feel free to do feel free

to please reach out.

I have no problem with that whatsoever.

Um, you can see the presentation was brought to you

by chat GP T I asked chat GP T to

come up with a 50 minute presentation that was called

looking towards a cloudy future and had some key points.

So the order of these slides and kind of some

of the content of these slides was developed by chat

G PC.

I checked it first.

Obviously, I didn't just I didn't just go and throw

it out of the bus, But with that, yes, let

me just hand over.

So any questions?

If anybody have any questions, please please feel free to

raise your hand and ask Yeah, uh, you mentioned the

function of the Yeah, in our project.

Yeah, I.

I like many articles and know that several several not

developing as good renovations.

I was wondering why the case?

Because it sounds like that.

So that's a really good question.

Um, and for anybody who didn't quite hear that, uh,

the question is really around serverless architecture and what's happening

in that space.

So I think if I talked about low code and

low code earlier on, that fills a particular thing particular

point in space, which is about time to value access

to your data that doesn't mean there's not a requirement

to still write code Cos there absolutely is still a

requirement to write code.

I think the key thing there is remembering that cloud

native.

The idea of containers and serverless used to mean the

same thing, right?

If you think in and of itself what an azure

function is small piece of code that can scale a

great volume based on inputs and it can create an

output, you could just as easily write that code in

a container.

In fact, you can write that as a as a

function and deploy it to a container and have a

container orchestration engine like cubes.

Run that for you or, uh, an advancement of of

azure functions is container apps, which is another kind of

platform service that allows you to run containers without having

to worry about the orchestration of everything else.

So has Serverless development stagnated?

No.

Um, there is still a very large team that provides

updates and is developing new functionality for azure functions.

If you think about the way that software has been

written over the years, the whole idea of client server

three tier architecture, those sort of things.

I'm going to have a front end.

I'm going to have a database.

I'm going to build this business layer in between.

Then the idea of micro services, you know, I'm gonna

have a thin slice through my application where things are

bound to a domain.

There's a user object.

I'm going to write a bit of code that interacts

with the user object.

And I can write that in Python.

I can write that in C#.

I can write it in Java and I can have

something else, which is an account, and I can do

that separately and control those.

That is a really good use case for for So

micro services is a really good use case for servers

architecture.

So I don't think service architecture is going away.

I think the problem the problem with it is, is

that containers have become really, really popular.

The other advantage of containers is they can run anywhere

because it's a thin slice.

It contains all the bits that are needed to run

and execute.

So Microsoft and Amazon as well have created solutions that

allow you to say, create an azure function, deploy it

as a container run that in a container app.

Run that in as a community service Run that on

premises Run that, as in, um, elastic community service in

in AWS.

Run it anywhere, right?

But you're still writing that piece of code.

It's just that instead of it being serverless where things

scale based on the infrastructure that it's running on.

So, for instance, with azure function, I can put the

slider up and say, I want 100 instances of this

If it gets swamped and a fabric underneath and yeah,

uh, lander functions on, um on, uh, on AWS is

the same thing, right?

Lander is the same.

Um, it will scale the infrastructure.

It will deal with all the networking.

It will deal with all that.

The routing of traffic.

It would do all those things for you.

That's what service is bringing you.

The or engine kind of does a similar thing.

It's just that you're more responsible for it.

You gotta babysit it and look after it, but fundamentally,

they're very, very similar.

So it's kind of where do you want to draw

your line?

There's no reason to not deploy stuff to service infrastructure.

The key thing, and I didn't mention this because I

didn't think I have time.

The key thing is making sure that when you develop

and deliver things, you provide a very, very, um, uh

governed process to deliver that from the person who's developed

it to the cloud infrastructure.

Whether that's a service as a function or logic apps,

which also runs on the service function, uh, service functions

run time as an orchestration engine or whether it's to

a container that's running under a KS or it's to

a container in EKS or or GKE in, in, in,

in the Google Cloud or on premises.

Doesn't really matter.

Writing the code to do the job.

Delivering business value is far more important than the technology

that you write on.

I hope that answers the question.

Yeah, any more questions?

Oh, yes.

Um, I heard about something recently, um called like reverse

cloud migration.

And now and she She's a box, and she thinks

I so I.

I think the key thing there is the the concept

of sticker shock.

As I was mentioning, um, sorry, the the question was

about, Are people moving stuff away from the cloud?

So I think most of the big cloud providers went

through a process where they go Hey, everybody move your

stuff because it's great.

This is gonna be the answer to everything.

You've got a bunch of servers that you're running, that

you're only using 5% of your CP US on we

can, right size those.

And moreover, what happens is when you put that up

in the cloud, all the money that you save you

can reinvest in your IT department.

Fantastic.

Sounds like a great story.

The reality is that when you have a financial organisation

or an organisation that has a financial, uh, operation and

they are used to having the situation where they get

a a yearly bill, it's very hard to change that

to a monthly bill.

There's a lot of change that's involved in that process,

and it's also harder if you go OK, well, yearly.

I'm spending $5 million on my infrastructure and you get

a bill in the first month.

That's a million dollars you're going.

Oh my God, that's $12 million for the next month,

maybe 100,000, because maybe that million dollars was was you

setting up your infrastructure.

So there's this intangibility between, you know, the reality of

cloud costs, and the one thing that you should always

do with any of the cloud infrastructure is cost optimisation.

Go back and look at it and make sure that

you're using it effectively.

So cloud costs and the reality of lack of control

as well, because now you're no longer operating it.

Somebody else is operating it for you.

So I think there's 22 aspects to that one is

Yeah, reverse Cloud is really people going.

It's too expensive and I'm no longer in control.

There's been a long term sort of debate around data

sovereignty.

Where's my data?

If my data is not in Australia, I can't use

your service.

The reality of the situation is very often that's not

the case because there's a certain level of thought that

says Microsoft, Amazon, Google, who are running data centres globally

and have gone through certifications to make sure that you

can put your data there, means that their data centres

are probably way more secure than the data centre that

you're running as a result of that, right, so so

you know, there's there's an aspect of that as well.

But most organisations are risk averse and cost of us.

And those will be the two factors that that play

into that.

The risk of where where it is and who's operating

it.

Do you trust them?

Is their vendor lock in?

Do I do I do I trust these people in

the long term to have my best interests at heart

and the cost that answer the question.

Yeah, so yeah.

Um So here, here, right now that we're we're passing

the people elected, expected for services and see what I'd

say.

We probably passed that peak a while ago.

I, I think things like, um, things like a I

workloads have made us realise the value of the cloud.

Now, we probably don't understand that the majority of people

in in large scale organisations probably don't understand or indeed

care, Uh, that it's running on cloud infrastructure.

They know that they can run an A I model.

They can run a deep learning training model.

Yeah, they understand they can do that bit, which has

only barely been delivered as a result of the cloud.

I mean, you could absolutely run those sort of things

in the past, my background in computational fluid dynamics.

It used to be.

I mean, I've worked with an organisation not not worked,

worked, but worked with them.

Um, all their stuff was run on Macintosh's MacBooks, and

they had to leave their MacBooks plugged in at night

because what they would do is they'd send models out

to those MacBooks because they're idle at night and run

those models over night.

So they had little programmes that would accept a piece

of code and some data, and it would run a

model and it would push that back.

That's quite complex, and it's quite a lot of stuff

that you have to manage.

So having the ability to not even care about that,

I think, is is is where the cloud really delivers

value.

In terms of peak.

I think we've been talking about cloud migrations, moving out

your own data centre into azure AWS.

Probably not GCP because that's more data.

Um, but you know those two key ones or or

Oracle cloud for databases?

We've been talking about that for 12 years now.

Problem right now.

We've been talking about that for 12 years, but most

organisations are not operated on, you will find that they

have, and this comes back to the point about reverse

cloud to a degree.

But it also talks about that hybrid model and that

multi cloud model.

Don't put all your eggs in one basket, right, that

is, there's there's the concept of digital first cloud first,

so organisations that have only ever run their infrastructure in

the cloud.

Not surprisingly, there's a lot of those in the start

up space.

Um, but you know whether whether those long term will

do that.

If you look at Facebook and all the others, they

don't run on public cloud infrastructure.

They have their own data sensors to run that.

But there's also the concept of this idea of noisy

neighbours, right?

So if you're running on a cloud service and it's

not a completely managed instance of something, then if somebody

else is running on that infrastructure because it's shared infrastructure

potentially, then, yeah, they could operationally impact you if somebody

else is running really heavy workloads.

So there's been a There's been some of that as

well, but has it reached a peak?

I think it's probably reached the peak in terms of

our knowledge of it.

Has it reached a peak in terms of people adopting

it and using it?

Probably not, Will it?

Probably not.

I think the hybrid cloud and multi cloud model is

is is a more realistic solution for large scale organisations.

Because if nothing else, risk If I have a system

that that is the brains of my organisation and I

move it to somebody else's infrastructure, how much risk does

it have?

Access?

Um, availability.

All the all the usual sort of cloud computing things.

Um how much does it have?

How How could I be impacted by that?

So, yeah, I think again, it's It's the risk of

money thing.

You know?

You have to you have to weigh both up.

Um, I think Do we have time for one more?

That?

Yeah, yeah, yeah.

You didn't find actually that.

So I was looking for a, um uh, so architecture

or a that connects with some type of visualisation and

then also communicate to an IP device.

Do you have any kind of suggestions for two way

communication?

Whether that's in his world, I'm trying to use a

but so so azure has IOT hub, which supports two

icons and supports MQ TT.

Um, AWS has an equivalent.

Um, you know, I, I think the key thing there.

So visualisation tool is lots power.

B I tableau.

You know, you can even store stuff in in something

like cosmos and run across the top of it, which

is a free visualisation tool.

And there's a service, a fully managed grain service inside

a.

Or you can build a VM and run it on

there.

That's fine.

Uh, so there's there's a lot of options, uh, in

terms of service architecture, the key thing about that question

is really about where you scale, What, what, what volume

you're talking about?

Because that's the real value of service architecture.

So it could be that, you know, you know that,

for instance, um, your user objects just using that as

an example.

Uh, your user objects don't change very often.

You don't change your name very often, but your account

object you know who you're looking after, and so on

and so forth may change more regularly, so that may

need to scale at a separate in a separate level

to to the to the other objects.

And that's where that service architecture and that that scalability

elasticity comes in.

Um, the big thing about any of those solutions is

the volume of data you're dealing with.

IOT is all about volume.

The reason that IOT is such a big thing is

big data, right?

So getting large volumes of data from one place to

another place.

You can't do that when you're in infrastructure because you

don't know what you can, and scar systems are a

great example of that.

But you can't.

You know, it's not very easy to report on those

because they're operational systems.

So you know a mine site won't allow you access

to their operational system, because guess what?

If you go in there and run a website and

and build loads of visualisations off of their data, that's,

you know, real time operational data.

It could impact their ability to process all that's where

the dollar is, right?

So So that's why OT operational, um, technology systems and

IT information technology systems are separate because of that very

thing.

We're bridging that gap and edge solve some of those

problems, and IOC is arguably a indicator there.

But Yeah.

Send send me a message.

I.

I I'm happy to to chat about that.

Just conscious of time, OK, 2020 to 10, Martin for